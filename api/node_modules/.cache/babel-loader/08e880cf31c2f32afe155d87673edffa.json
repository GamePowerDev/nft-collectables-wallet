{"ast":null,"code":"// Copyright 2017-2019 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isUndefined } from '@polkadot/util';\n\nfunction sig(_ref) {\n  var method = _ref.method,\n      section = _ref.section;\n\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return \"\".concat(section, \".\").concat(method, \"(\").concat(args.join(', '), \")\");\n}\n\nfunction doDoubleMap(creator, args) {\n  var _creator$meta$type$as = creator.meta.type.asDoubleMap,\n      key1 = _creator$meta$type$as.key1,\n      key2 = _creator$meta$type$as.key2;\n  assert(args.length === 2, \"\".concat(sig(creator, key1, key2), \" is a doublemap, requiring 2 arguments, \").concat(args.length, \" found\")); // pass as tuple\n\n  return [creator, args];\n}\n\nfunction doMap(creator, args) {\n  var key = creator.meta.type.asMap.key;\n  assert(args.length === 1, \"\".concat(sig(creator, key), \" is a map, requiring 1 argument, \").concat(args.length, \" found\")); // expand\n\n  return args.length ? [creator, args[0]] : [creator];\n} // sets up the arguments in the form of [creator, args] ready to be used in a storage\n// call. Additionally, it verifies that the correct number of arguments have been passed\n\n\nexport function extractStorageArgs(creator, _args) {\n  var args = _args.filter(function (arg) {\n    return !isUndefined(arg);\n  });\n\n  if (creator.meta.type.isDoubleMap) {\n    return doDoubleMap(creator, args);\n  } else if (creator.meta.type.isMap) {\n    return doMap(creator, args);\n  }\n\n  assert(args.length === 0, \"\".concat(sig(creator), \" does not take any arguments, \").concat(args.length, \" found\")); // no args\n\n  return [creator];\n}","map":null,"metadata":{},"sourceType":"module"}