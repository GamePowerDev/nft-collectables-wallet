{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from \"../assert.js\";\nimport { isHex } from \"../is/hex.js\";\nimport { hexStripPrefix } from \"./stripPrefix.js\";\n/**\n * @name hexToU8a\n * @summary Creates a Uint8Array object from a hex string.\n * @description\n * `null` inputs returns an empty `Uint8Array` result. Hex input values return the actual bytes value converted to a Uint8Array. Anything that is not a hex string (including the `0x` prefix) throws an error.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexToU8a } from '@polkadot/util';\n *\n * hexToU8a('0x80001f'); // Uint8Array([0x80, 0x00, 0x1f])\n * hexToU8a('0x80001f', 32); // Uint8Array([0x00, 0x80, 0x00, 0x1f])\n * ```\n */\n\nexport function hexToU8a(_value) {\n  var bitLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n\n  if (!_value) {\n    return new Uint8Array();\n  }\n\n  assert(isHex(_value), \"Expected hex value to convert, found '\".concat(_value, \"'\"));\n  var value = hexStripPrefix(_value);\n  var valLength = value.length / 2;\n  var bufLength = Math.ceil(bitLength === -1 ? valLength : bitLength / 8);\n  var result = new Uint8Array(bufLength);\n  var offset = Math.max(0, bufLength - valLength);\n\n  for (var index = 0; index < bufLength; index++) {\n    result[index + offset] = parseInt(value.substr(index * 2, 2), 16);\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}