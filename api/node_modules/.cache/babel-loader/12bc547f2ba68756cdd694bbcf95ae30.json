{"ast":null,"code":"import _toConsumableArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { polkadot } from \"./polkadot.js\";\nimport { substrate } from \"./substrate.js\"; // A mapping of the known signed extensions to the extra fields that they contain. Unlike in the actual extensions,\n// we define the extra fields not as a Tuple, but rather as a struct so they can be named. These will be expanded\n// into the various fields when added to the payload (we only support V4 onwards with these, V3 and earlier are\n// deemed fixed and non-changeable)\n\nvar allExtensions = _objectSpread(_objectSpread({}, substrate), polkadot); // the v4 signed extensions (the order is important here, as applied by default)\n\n\nvar defaultExtensions = ['CheckVersion', 'CheckGenesis', 'CheckEra', 'CheckNonce', 'CheckWeight', 'ChargeTransactionPayment', 'CheckBlockGasLimit'];\n\nfunction findUnknownExtensions(extensions) {\n  var userExtensions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var names = [].concat(_toConsumableArray(Object.keys(allExtensions)), _toConsumableArray(Object.keys(userExtensions)));\n  return extensions.filter(function (key) {\n    return !names.includes(key);\n  });\n}\n\nfunction expandExtensionTypes(extensions, type) {\n  var userExtensions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return extensions // Always allow user extensions first - these should provide overrides\n  .map(function (key) {\n    return userExtensions[key] || allExtensions[key];\n  }).filter(function (info) {\n    return !!info;\n  }).reduce(function (result, info) {\n    return _objectSpread(_objectSpread({}, result), info[type]);\n  }, {});\n}\n\nexport { allExtensions, defaultExtensions, expandExtensionTypes, findUnknownExtensions };","map":null,"metadata":{},"sourceType":"module"}