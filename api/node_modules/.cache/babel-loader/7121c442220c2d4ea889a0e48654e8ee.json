{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isBigInt } from \"./is/bigInt.js\";\nimport { isUndefined } from \"./is/undefined.js\";\n\nfunction defaultGetId() {\n  return 'none';\n}\n\nfunction normalize(args) {\n  return JSON.stringify(args, function (_, value) {\n    return isBigInt(value) ? value.toString() : value;\n  });\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nexport function memoize(fn) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$getInstanceId = _ref.getInstanceId,\n      getInstanceId = _ref$getInstanceId === void 0 ? defaultGetId : _ref$getInstanceId;\n\n  var cache = {};\n\n  var memoized = function memoized() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var stringParams = normalize(args);\n    var instanceId = getInstanceId();\n\n    if (!cache[instanceId]) {\n      cache[instanceId] = {};\n    }\n\n    if (isUndefined(cache[instanceId][stringParams])) {\n      cache[instanceId][stringParams] = fn.apply(void 0, args);\n    }\n\n    return cache[instanceId][stringParams];\n  };\n\n  memoized.unmemoize = function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    var stringParams = normalize(args);\n    var instanceId = getInstanceId();\n\n    if (cache[instanceId] && !isUndefined(cache[instanceId][stringParams])) {\n      delete cache[instanceId][stringParams];\n    }\n  };\n\n  return memoized;\n}","map":null,"metadata":{},"sourceType":"module"}