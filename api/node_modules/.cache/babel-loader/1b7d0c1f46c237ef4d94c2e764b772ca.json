{"ast":null,"code":"import _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/metadata authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { flattenUniq } from \"./flattenUniq.js\";\nimport { validateTypes } from \"./validateTypes.js\";\n/** @internal */\n\nfunction unwrapCalls(mod) {\n  return mod.calls ? mod.calls.unwrapOr([]) // V0\n  : mod.module ? mod.module.call.functions : [];\n}\n/** @internal */\n\n\nfunction getCallNames(_ref) {\n  var modules = _ref.modules;\n  return modules.map(function (mod) {\n    return unwrapCalls(mod).map(function (_ref2) {\n      var args = _ref2.args;\n      return args.map(function (arg) {\n        return arg.type.toString();\n      });\n    });\n  });\n}\n/** @internal */\n\n\nfunction getConstantNames(_ref3) {\n  var modules = _ref3.modules;\n  return modules.map(function (_ref4) {\n    var constants = _ref4.constants;\n    return constants ? constants.map(function (constant) {\n      return constant.type.toString();\n    }) : [];\n  });\n}\n/** @internal */\n\n\nfunction unwrapEvents(events) {\n  if (!events) {\n    return [];\n  }\n\n  return events.unwrapOr([]);\n}\n/** @internal */\n\n\nfunction getEventNames(_ref5) {\n  var modules = _ref5.modules,\n      outerEvent = _ref5.outerEvent;\n\n  var mapArg = function mapArg(_ref6) {\n    var args = _ref6.args;\n    return args.map(function (arg) {\n      return arg.toString();\n    });\n  }; // V0\n\n\n  if (outerEvent) {\n    return outerEvent.events.map(function (_ref7) {\n      var _ref8 = _slicedToArray(_ref7, 2),\n          events = _ref8[1];\n\n      return events.map(mapArg);\n    });\n  } // V1+\n\n\n  return modules.map(function (_ref9) {\n    var events = _ref9.events;\n    return unwrapEvents(events).map(mapArg);\n  });\n}\n/** @internal */\n\n\nfunction unwrapStorage(storage) {\n  if (!storage) {\n    return [];\n  }\n\n  var data = storage.unwrapOr([]);\n  return Array.isArray(data) ? data : data.items || data.functions;\n}\n/** @internal */\n\n\nfunction getStorageNames(_ref10) {\n  var modules = _ref10.modules;\n  return modules.map(function (_ref11) {\n    var storage = _ref11.storage;\n    return unwrapStorage(storage).map(function (_ref12) {\n      var type = _ref12.type;\n\n      if (type.isDoubleMap && type.asDoubleMap) {\n        return [type.asDoubleMap.key1.toString(), type.asDoubleMap.key2.toString(), type.asDoubleMap.value.toString()];\n      } else if (type.isMap) {\n        return [type.asMap.key.toString(), type.asMap.value.toString()];\n      } else {\n        return [type.asPlain.toString()];\n      }\n    });\n  });\n}\n/** @internal */\n\n\nexport function getUniqTypes(registry, meta, throwError) {\n  var types = flattenUniq([getCallNames(meta), getConstantNames(meta), getEventNames(meta), getStorageNames(meta)]);\n  validateTypes(registry, types, throwError);\n  return types;\n}","map":null,"metadata":{},"sourceType":"module"}