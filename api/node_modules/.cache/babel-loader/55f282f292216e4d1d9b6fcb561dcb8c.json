{"ast":null,"code":"import _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { memo } from '@polkadot/api-derive/util';\nimport { combineLatest, of } from '@polkadot/x-rxjs';\nimport { map, switchMap } from '@polkadot/x-rxjs/operators';\nimport { filterBountiesProposals } from \"./helpers/filterBountyProposals.js\";\n\nfunction parseResult(_ref) {\n  var _ref2 = _slicedToArray(_ref, 4),\n      maybeBounties = _ref2[0],\n      maybeDescriptions = _ref2[1],\n      ids = _ref2[2],\n      bountyProposals = _ref2[3];\n\n  var bounties = [];\n  maybeBounties.forEach(function (bounty, index) {\n    if (bounty.isSome) {\n      bounties.push({\n        bounty: bounty.unwrap(),\n        description: maybeDescriptions[index].unwrapOrDefault().toUtf8(),\n        index: ids[index],\n        proposals: bountyProposals.filter(function (bountyProposal) {\n          return ids[index].eq(bountyProposal.proposal.args[0]);\n        })\n      });\n    }\n  });\n  return bounties;\n}\n\nexport function bounties(instanceId, api) {\n  var bountyBase = api.query.bounties || api.query.treasury;\n  return memo(instanceId, function () {\n    return combineLatest([bountyBase.bountyCount(), api.query.council ? api.query.council.proposalCount() : of(0)]).pipe(switchMap(function () {\n      return combineLatest([bountyBase.bounties.keys(), api.derive.council ? api.derive.council.proposals() : of([])]);\n    }), switchMap(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          keys = _ref4[0],\n          proposals = _ref4[1];\n\n      var ids = keys.map(function (_ref5) {\n        var _ref5$args = _slicedToArray(_ref5.args, 1),\n            id = _ref5$args[0];\n\n        return id;\n      });\n      return combineLatest([bountyBase.bounties.multi(ids), bountyBase.bountyDescriptions.multi(ids), of(ids), of(filterBountiesProposals(api, proposals))]);\n    }), map(parseResult));\n  });\n}","map":null,"metadata":{},"sourceType":"module"}