{"ast":null,"code":"import _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, u8aToU8a } from '@polkadot/util';\nimport { decodeAddress } from \"../address/decode.js\";\nimport { naclVerify } from \"../nacl/verify.js\";\nimport { schnorrkelVerify } from \"../schnorrkel/verify.js\";\nimport { secp256k1Verify } from \"../secp256k1/verify.js\";\n\nvar secp256k1VerifyHasher = function secp256k1VerifyHasher(hashType) {\n  return function (message, signature, publicKey) {\n    return secp256k1Verify(message, signature, publicKey, hashType);\n  };\n};\n\nvar VERIFIERS_ECDSA = [['ecdsa', secp256k1VerifyHasher('blake2')], ['ethereum', secp256k1VerifyHasher('keccak')]];\nvar VERIFIERS = [['ed25519', naclVerify], ['sr25519', schnorrkelVerify]].concat(VERIFIERS_ECDSA);\nvar CRYPTO_TYPES = ['ed25519', 'sr25519', 'ecdsa'];\n\nfunction verifyDetect(result, _ref) {\n  var message = _ref.message,\n      publicKey = _ref.publicKey,\n      signature = _ref.signature;\n  var verifiers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : VERIFIERS;\n  result.isValid = verifiers.some(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        crypto = _ref3[0],\n        verify = _ref3[1];\n\n    try {\n      if (verify(message, signature, publicKey)) {\n        result.crypto = crypto;\n        return true;\n      }\n    } catch (error) {// do nothing, result.isValid still set to false\n    }\n\n    return false;\n  });\n  return result;\n}\n\nfunction verifyMultisig(result, _ref4) {\n  var message = _ref4.message,\n      publicKey = _ref4.publicKey,\n      signature = _ref4.signature;\n  assert([0, 1, 2].includes(signature[0]), \"Unknown crypto type, expected signature prefix [0..2], found \".concat(signature[0]));\n  var type = CRYPTO_TYPES[signature[0]] || 'none';\n  result.crypto = type;\n\n  try {\n    result.isValid = {\n      ecdsa: function ecdsa() {\n        return verifyDetect(result, {\n          message: message,\n          publicKey: publicKey,\n          signature: signature.subarray(1)\n        }, VERIFIERS_ECDSA).isValid;\n      },\n      ed25519: function ed25519() {\n        return naclVerify(message, signature.subarray(1), publicKey);\n      },\n      none: function none() {\n        throw Error('no verify for `none` crypto type');\n      },\n      sr25519: function sr25519() {\n        return schnorrkelVerify(message, signature.subarray(1), publicKey);\n      }\n    }[type]();\n  } catch (error) {// ignore, result.isValid still set to false\n  }\n\n  return result;\n}\n\nexport function signatureVerify(message, signature, addressOrPublicKey) {\n  var signatureU8a = u8aToU8a(signature);\n  assert([64, 65, 66].includes(signatureU8a.length), \"Invalid signature length, expected [64..66] bytes, found \".concat(signatureU8a.length));\n  var publicKey = decodeAddress(addressOrPublicKey);\n  var input = {\n    message: message,\n    publicKey: publicKey,\n    signature: signatureU8a\n  };\n  var result = {\n    crypto: 'none',\n    isValid: false,\n    publicKey: publicKey\n  };\n  return [0, 1, 2].includes(signatureU8a[0]) && [65, 66].includes(signatureU8a.length) ? verifyMultisig(result, input) : verifyDetect(result, input);\n}","map":null,"metadata":{},"sourceType":"module"}