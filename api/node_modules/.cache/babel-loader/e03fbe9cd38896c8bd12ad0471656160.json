{"ast":null,"code":"import _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { Option } from \"./Option.js\";\nimport { Struct } from \"./Struct.js\";\nimport { Tuple } from \"./Tuple.js\";\nimport { Vec } from \"./Vec.js\";\nvar EMPTY = new Uint8Array();\n/**\n * @name Linkage\n * @description The wrapper for the result from a LinkedMap\n */\n\nexport var Linkage = /*#__PURE__*/function (_Struct) {\n  _inherits(Linkage, _Struct);\n\n  var _super = _createSuper(Linkage);\n\n  function Linkage(registry, Type, value) {\n    _classCallCheck(this, Linkage);\n\n    return _super.call(this, registry, {\n      previous: Option.with(Type),\n      // eslint-disable-next-line sort-keys\n      next: Option.with(Type)\n    }, value);\n  }\n\n  _createClass(Linkage, [{\n    key: \"previous\",\n    get: function get() {\n      return this.get('previous');\n    }\n  }, {\n    key: \"next\",\n    get: function get() {\n      return this.get('next');\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return \"Linkage<\".concat(this.next.toRawType(true), \">\");\n    }\n    /**\n     * @description Custom toU8a which with bare mode does not return the linkage if empty\n     */\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a() {\n      // As part of a storage query (where these appear), in the case of empty, the values\n      // are NOT populated by the node - follow the same logic, leaving it empty\n      return this.isEmpty ? EMPTY : _get(_getPrototypeOf(Linkage.prototype), \"toU8a\", this).call(this);\n    }\n  }], [{\n    key: \"withKey\",\n    value: function withKey(Type) {\n      return /*#__PURE__*/function (_Linkage) {\n        _inherits(_class, _Linkage);\n\n        var _super2 = _createSuper(_class);\n\n        function _class(registry, value) {\n          _classCallCheck(this, _class);\n\n          return _super2.call(this, registry, Type, value);\n        }\n\n        return _class;\n      }(Linkage);\n    }\n  }]);\n\n  return Linkage;\n}(Struct);\n/**\n * @name LinkageResult\n * @description A Linkage keys/Values tuple\n */\n\nexport var LinkageResult = /*#__PURE__*/function (_Tuple) {\n  _inherits(LinkageResult, _Tuple);\n\n  var _super3 = _createSuper(LinkageResult);\n\n  function LinkageResult(registry, _ref, _ref2) {\n    var _ref3 = _slicedToArray(_ref, 2),\n        TypeKey = _ref3[0],\n        keys = _ref3[1];\n\n    var _ref4 = _slicedToArray(_ref2, 2),\n        TypeValue = _ref4[0],\n        values = _ref4[1];\n\n    _classCallCheck(this, LinkageResult);\n\n    return _super3.call(this, registry, {\n      Keys: Vec.with(TypeKey),\n      Values: Vec.with(TypeValue)\n    }, [keys, values]);\n  }\n\n  return LinkageResult;\n}(Tuple);","map":null,"metadata":{},"sourceType":"module"}