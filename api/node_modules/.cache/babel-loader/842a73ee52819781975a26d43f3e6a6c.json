{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { of } from '@polkadot/x-rxjs';\nimport { map, switchMap } from '@polkadot/x-rxjs/operators';\nimport { deriveCache, memo } from \"../util/index.js\";\nimport { filterEras } from \"./util.js\";\nvar CACHE_KEY = 'eraRewards';\n\nfunction mapRewards(eras, optRewards) {\n  return eras.map(function (era, index) {\n    return {\n      era: era,\n      eraReward: optRewards[index].unwrapOrDefault()\n    };\n  });\n}\n\nexport function _erasRewards(instanceId, api) {\n  return memo(instanceId, function (eras, withActive) {\n    if (!eras.length) {\n      return of([]);\n    }\n\n    var cached = withActive ? [] : eras.map(function (era) {\n      return deriveCache.get(\"\".concat(CACHE_KEY, \"-\").concat(era.toString()));\n    }).filter(function (value) {\n      return !!value;\n    });\n    var remaining = filterEras(eras, cached);\n\n    if (!remaining.length) {\n      return of(cached);\n    }\n\n    return api.query.staking.erasValidatorReward.multi(remaining).pipe(map(function (optRewards) {\n      var query = mapRewards(remaining, optRewards);\n      !withActive && query.forEach(function (q) {\n        return deriveCache.set(\"\".concat(CACHE_KEY, \"-\").concat(q.era.toString()), q);\n      });\n      return eras.map(function (era) {\n        return cached.find(function (cached) {\n          return era.eq(cached.era);\n        }) || query.find(function (query) {\n          return era.eq(query.era);\n        });\n      });\n    }));\n  });\n}\nexport function erasRewards(instanceId, api) {\n  return memo(instanceId, function () {\n    var withActive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return api.derive.staking.erasHistoric(withActive).pipe(switchMap(function (eras) {\n      return api.derive.staking._erasRewards(eras, withActive);\n    }));\n  });\n}","map":null,"metadata":{},"sourceType":"module"}