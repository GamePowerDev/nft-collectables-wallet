{"ast":null,"code":"import _toConsumableArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/metadata authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { isHex, isObject, isU8a, u8aToU8a } from '@polkadot/util';\nimport { Struct } from \"../codec/Struct.js\";\nimport { U8aFixed } from \"../codec/U8aFixed.js\";\nimport { getTypeClass } from \"../create/createClass.js\";\nimport { getTypeDef } from \"../create/getTypeDef.js\";\n/**\n * Get a mapping of `argument name -> argument type` for the function, from\n * its metadata.\n *\n * @param meta - The function metadata used to get the definition.\n * @internal\n */\n\nfunction getArgsDef(registry, meta) {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  return GenericCall.filterOrigin(meta).reduce(function (result, _ref) {\n    var name = _ref.name,\n        type = _ref.type;\n    var Type = getTypeClass(registry, getTypeDef(type));\n    result[name.toString()] = Type;\n    return result;\n  }, {});\n}\n/** @internal */\n\n\nfunction decodeCallViaObject(registry, value, _meta) {\n  // we only pass args/methodsIndex out\n  var args = value.args,\n      callIndex = value.callIndex; // Get the correct lookupIndex\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n  var lookupIndex = callIndex instanceof GenericCallIndex ? callIndex.toU8a() : callIndex; // Find metadata with callIndex\n\n  var meta = _meta || registry.findMetaCall(lookupIndex).meta;\n\n  return {\n    args: args,\n    argsDef: getArgsDef(registry, meta),\n    callIndex: callIndex,\n    meta: meta\n  };\n}\n/** @internal */\n\n\nfunction decodeCallViaU8a(registry, value, _meta) {\n  // We need 2 bytes for the callIndex\n  var callIndex = new Uint8Array(2);\n  callIndex.set(value.subarray(0, 2), 0); // Find metadata with callIndex\n\n  var meta = _meta || registry.findMetaCall(callIndex).meta;\n\n  return {\n    args: value.subarray(2),\n    argsDef: getArgsDef(registry, meta),\n    callIndex: callIndex,\n    meta: meta\n  };\n}\n/**\n * Decode input to pass into constructor.\n *\n * @param value - Value to decode, one of:\n * - hex\n * - Uint8Array\n * - {@see DecodeMethodInput}\n * @param _meta - Metadata to use, so that `injectMethods` lookup is not\n * necessary.\n * @internal\n */\n\n\nfunction decodeCall(registry) {\n  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint8Array();\n\n  var _meta = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (isHex(value) || isU8a(value)) {\n    return decodeCallViaU8a(registry, u8aToU8a(value), _meta);\n  } else if (isObject(value) && value.callIndex && value.args) {\n    return decodeCallViaObject(registry, value, _meta);\n  }\n\n  throw new Error(\"Call: Cannot decode value '\".concat(value, \"' of type \").concat(typeof value));\n}\n/**\n * @name GenericCallIndex\n * @description\n * A wrapper around the `[sectionIndex, methodIndex]` value that uniquely identifies a method\n */\n\n\nexport var GenericCallIndex = /*#__PURE__*/function (_U8aFixed) {\n  _inherits(GenericCallIndex, _U8aFixed);\n\n  var _super = _createSuper(GenericCallIndex);\n\n  function GenericCallIndex(registry, value) {\n    _classCallCheck(this, GenericCallIndex);\n\n    return _super.call(this, registry, value, 16);\n  }\n\n  return GenericCallIndex;\n}(U8aFixed);\n/**\n * @name GenericCall\n * @description\n * Extrinsic function descriptor\n */\n\nexport var GenericCall = /*#__PURE__*/function (_Struct) {\n  _inherits(GenericCall, _Struct);\n\n  var _super2 = _createSuper(GenericCall);\n\n  function GenericCall(registry, value, meta) {\n    var _this;\n\n    _classCallCheck(this, GenericCall);\n\n    var decoded = decodeCall(registry, value, meta);\n\n    try {\n      _this = _super2.call(this, registry, {\n        callIndex: GenericCallIndex,\n        // eslint-disable-next-line sort-keys\n        args: Struct.with(decoded.argsDef)\n      }, decoded);\n      _this._meta = void 0;\n    } catch (error) {\n      var method = 'unknown.unknown';\n\n      try {\n        var c = registry.findMetaCall(decoded.callIndex);\n        method = \"\".concat(c.section, \".\").concat(c.method);\n      } catch (error) {// ignore\n      }\n\n      throw new Error(\"Call: failed decoding \".concat(method, \":: \").concat(error.message));\n    }\n\n    _this._meta = decoded.meta;\n    return _this;\n  } // If the extrinsic function has an argument of type `Origin`, we ignore it\n\n\n  _createClass(GenericCall, [{\n    key: \"args\",\n    get:\n    /**\n     * @description The arguments for the function call\n     */\n    function get() {\n      // FIXME This should return a Struct instead of an Array\n      return _toConsumableArray(this.get('args').values());\n    }\n    /**\n     * @description The argument definitions\n     */\n\n  }, {\n    key: \"argsDef\",\n    get: function get() {\n      return getArgsDef(this.registry, this.meta);\n    }\n    /**\n     * @description The encoded `[sectionIndex, methodIndex]` identifier\n     */\n\n  }, {\n    key: \"callIndex\",\n    get: function get() {\n      return this.get('callIndex').toU8a();\n    }\n    /**\n     * @description The encoded data\n     */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this.get('args').toU8a();\n    }\n    /**\n     * @description The [[FunctionMetadata]]\n     */\n\n  }, {\n    key: \"meta\",\n    get: function get() {\n      return this._meta;\n    }\n    /**\n     * @description Returns the name of the method\n     */\n\n  }, {\n    key: \"method\",\n    get: function get() {\n      return this.registry.findMetaCall(this.callIndex).method;\n    }\n    /**\n     * @description Returns the module containing the method\n     */\n\n  }, {\n    key: \"section\",\n    get: function get() {\n      return this.registry.findMetaCall(this.callIndex).section;\n    }\n    /**\n     * @description Checks if the source matches this in type\n     */\n\n  }, {\n    key: \"is\",\n    value: function is(other) {\n      return other.callIndex[0] === this.callIndex[0] && other.callIndex[1] === this.callIndex[1];\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman(isExpanded) {\n      var _call, _call2;\n\n      var call;\n\n      try {\n        call = this.registry.findMetaCall(this.callIndex);\n      } catch (error) {// swallow\n      }\n\n      return _objectSpread({\n        args: this.args.map(function (arg) {\n          return arg.toHuman(isExpanded);\n        }),\n        // args: this.args.map((arg, index) => call\n        //   ? { [call.meta.args[index].name.toString()]: arg.toHuman(isExpanded) }\n        //   : arg.toHuman(isExpanded)\n        // ),\n        // callIndex: u8aToHex(this.callIndex),\n        method: (_call = call) === null || _call === void 0 ? void 0 : _call.method,\n        section: (_call2 = call) === null || _call2 === void 0 ? void 0 : _call2.section\n      }, isExpanded && call ? {\n        documentation: call.meta.documentation.map(function (d) {\n          return d.toString();\n        })\n      } : {});\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return 'Call';\n    }\n  }], [{\n    key: \"filterOrigin\",\n    value: function filterOrigin(meta) {\n      // FIXME should be `arg.type !== Origin`, but doesn't work...\n      return meta ? meta.args.filter(function (_ref2) {\n        var type = _ref2.type;\n        return type.toString() !== 'Origin';\n      }) : [];\n    }\n  }]);\n\n  return GenericCall;\n}(Struct);","map":null,"metadata":{},"sourceType":"module"}