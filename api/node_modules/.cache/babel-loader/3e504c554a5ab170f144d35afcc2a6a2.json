{"ast":null,"code":"// Copyright 2017-2021 @polkadot/keyring authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isUndefined, u8aEq } from '@polkadot/util';\nimport { jsonDecryptData } from '@polkadot/util-crypto';\nimport { PKCS8_DIVIDER, PKCS8_HEADER, PUB_LENGTH, SEC_LENGTH, SEED_LENGTH } from \"./defaults.js\";\nvar SEED_OFFSET = PKCS8_HEADER.length;\nexport function decodePair(passphrase, encrypted, _encType) {\n  var encType = Array.isArray(_encType) || isUndefined(_encType) ? _encType : [_encType];\n  var decrypted = jsonDecryptData(encrypted, passphrase, encType);\n  var header = decrypted.subarray(0, PKCS8_HEADER.length);\n  assert(u8aEq(header, PKCS8_HEADER), 'Invalid Pkcs8 header found in body');\n  var secretKey = decrypted.subarray(SEED_OFFSET, SEED_OFFSET + SEC_LENGTH);\n  var divOffset = SEED_OFFSET + SEC_LENGTH;\n  var divider = decrypted.subarray(divOffset, divOffset + PKCS8_DIVIDER.length); // old-style, we have the seed here\n\n  if (!u8aEq(divider, PKCS8_DIVIDER)) {\n    divOffset = SEED_OFFSET + SEED_LENGTH;\n    secretKey = decrypted.subarray(SEED_OFFSET, divOffset);\n    divider = decrypted.subarray(divOffset, divOffset + PKCS8_DIVIDER.length);\n    assert(u8aEq(divider, PKCS8_DIVIDER), 'Invalid Pkcs8 divider found in body');\n  }\n\n  var pubOffset = divOffset + PKCS8_DIVIDER.length;\n  var publicKey = decrypted.subarray(pubOffset, pubOffset + PUB_LENGTH);\n  return {\n    publicKey: publicKey,\n    secretKey: secretKey\n  };\n}","map":null,"metadata":{},"sourceType":"module"}