{"ast":null,"code":"import _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/keyring authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { assert, hexToU8a, isHex, isUndefined, stringToU8a } from '@polkadot/util';\nimport { base64Decode, decodeAddress, encodeAddress, ethereumEncode, hdEthereum, keyExtractSuri, keyFromPath, mnemonicToLegacySeed, mnemonicToMiniSecret, naclKeypairFromSeed as naclFromSeed, schnorrkelKeypairFromSeed as schnorrkelFromSeed, secp256k1KeypairFromSeed as secp256k1FromSeed } from '@polkadot/util-crypto';\nimport { DEV_PHRASE } from \"./defaults.js\";\nimport { createPair } from \"./pair/index.js\";\nimport { Pairs } from \"./pairs.js\";\nvar keypairFromSeed = {\n  ecdsa: function ecdsa(seed) {\n    return secp256k1FromSeed(seed);\n  },\n  ed25519: function ed25519(seed) {\n    return naclFromSeed(seed);\n  },\n  ethereum: function ethereum(seed) {\n    return secp256k1FromSeed(seed);\n  },\n  sr25519: function sr25519(seed) {\n    return schnorrkelFromSeed(seed);\n  }\n};\n/**\n * # @polkadot/keyring\n *\n * ## Overview\n *\n * @name Keyring\n * @summary Keyring management of user accounts\n * @description Allows generation of keyring pairs from a variety of input combinations, such as\n * json object containing account address or public key, account metadata, and account encoded using\n * `addFromJson`, or by providing those values as arguments separately to `addFromAddress`,\n * or by providing the mnemonic (seed phrase) and account metadata as arguments to `addFromMnemonic`.\n * Stores the keyring pairs in a keyring pair dictionary. Removal of the keyring pairs from the keyring pair\n * dictionary is achieved using `removePair`. Retrieval of all the stored pairs via `getPairs` or perform\n * lookup of a pair for a given account address or public key using `getPair`. JSON metadata associated with\n * an account may be obtained using `toJson` accompanied by the account passphrase.\n */\n\nvar _pairs = _classPrivateFieldLooseKey(\"pairs\");\n\nvar _type = _classPrivateFieldLooseKey(\"type\");\n\nvar _ss = _classPrivateFieldLooseKey(\"ss58\");\n\nexport var Keyring = /*#__PURE__*/function () {\n  function Keyring() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Keyring);\n\n    Object.defineProperty(this, _pairs, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _type, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _ss, {\n      writable: true,\n      value: void 0\n    });\n    this.decodeAddress = decodeAddress;\n\n    this.encodeAddress = function (address, ss58Format) {\n      return _this.type === 'ethereum' ? ethereumEncode(address) : encodeAddress(address, isUndefined(ss58Format) ? _classPrivateFieldLooseBase(_this, _ss)[_ss] : ss58Format);\n    };\n\n    options.type = options.type || 'ed25519';\n    assert(options && ['ecdsa', 'ethereum', 'ed25519', 'sr25519'].includes(options.type || 'undefined'), \"Expected a keyring type of either 'ed25519', 'sr25519', 'ethereum' or 'ecdsa', found '\".concat(options.type));\n    _classPrivateFieldLooseBase(this, _pairs)[_pairs] = new Pairs();\n    _classPrivateFieldLooseBase(this, _ss)[_ss] = options.ss58Format;\n    _classPrivateFieldLooseBase(this, _type)[_type] = options.type;\n  }\n  /**\n   * @description retrieve the pairs (alias for getPairs)\n   */\n\n\n  _createClass(Keyring, [{\n    key: \"pairs\",\n    get: function get() {\n      return this.getPairs();\n    }\n    /**\n     * @description retrieve the publicKeys (alias for getPublicKeys)\n     */\n\n  }, {\n    key: \"publicKeys\",\n    get: function get() {\n      return this.getPublicKeys();\n    }\n    /**\n     * @description Returns the type of the keyring, ed25519, sr25519 or ecdsa\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return _classPrivateFieldLooseBase(this, _type)[_type];\n    }\n    /**\n     * @name addPair\n     * @summary Stores an account, given a keyring pair, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n     */\n\n  }, {\n    key: \"addPair\",\n    value: function addPair(pair) {\n      return _classPrivateFieldLooseBase(this, _pairs)[_pairs].add(pair);\n    }\n    /**\n     * @name addFromAddress\n     * @summary Stores an account, given an account address, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n     * @description Allows user to explicitely provide separate inputs including account address or public key, and optionally\n     * the associated account metadata, and the default encoded value as arguments (that may be obtained from the json file\n     * of an account backup), and then generates a keyring pair from them that it passes to\n     * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n     */\n\n  }, {\n    key: \"addFromAddress\",\n    value: function addFromAddress(address) {\n      var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var encoded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.type;\n      var ignoreChecksum = arguments.length > 4 ? arguments[4] : undefined;\n      var encType = arguments.length > 5 ? arguments[5] : undefined;\n      var publicKey = this.decodeAddress(address, ignoreChecksum);\n      return this.addPair(createPair({\n        toSS58: this.encodeAddress,\n        type: type\n      }, {\n        publicKey: publicKey,\n        secretKey: new Uint8Array()\n      }, meta, encoded, encType));\n    }\n    /**\n     * @name addFromJson\n     * @summary Stores an account, given JSON data, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n     * @description Allows user to provide a json object argument that contains account information (that may be obtained from the json file\n     * of an account backup), and then generates a keyring pair from it that it passes to\n     * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n     */\n\n  }, {\n    key: \"addFromJson\",\n    value: function addFromJson(json, ignoreChecksum) {\n      return this.addPair(this.createFromJson(json, ignoreChecksum));\n    }\n    /**\n     * @name addFromMnemonic\n     * @summary Stores an account, given a mnemonic, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n     * @description Allows user to provide a mnemonic (seed phrase that is provided when account is originally created)\n     * argument and a metadata argument that contains account information (that may be obtained from the json file\n     * of an account backup), and then generates a keyring pair from it that it passes to\n     * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n     */\n\n  }, {\n    key: \"addFromMnemonic\",\n    value: function addFromMnemonic(mnemonic) {\n      var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.type;\n      return this.addFromUri(mnemonic, meta, type);\n    }\n    /**\n     * @name addFromPair\n     * @summary Stores an account created from an explicit publicKey/secreteKey combination\n     */\n\n  }, {\n    key: \"addFromPair\",\n    value: function addFromPair(pair) {\n      var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.type;\n      return this.addPair(this.createFromPair(pair, meta, type));\n    }\n    /**\n     * @name addFromSeed\n     * @summary Stores an account, given seed data, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n     * @description Stores in a keyring pair dictionary the public key of the pair as a key and the pair as the associated value.\n     * Allows user to provide the account seed as an argument, and then generates a keyring pair from it that it passes to\n     * `addPair` to store in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n     */\n\n  }, {\n    key: \"addFromSeed\",\n    value: function addFromSeed(seed) {\n      var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.type;\n      return this.addPair(createPair({\n        toSS58: this.encodeAddress,\n        type: type\n      }, keypairFromSeed[type](seed), meta, null));\n    }\n    /**\n     * @name addFromUri\n     * @summary Creates an account via an suri\n     * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed). The secret can be a hex string, mnemonic phrase or a string (to be padded)\n     */\n\n  }, {\n    key: \"addFromUri\",\n    value: function addFromUri(suri) {\n      var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.type;\n      return this.addPair(this.createFromUri(suri, meta, type));\n    }\n    /**\n     * @name createFromJson\n     * @description Creates a pair from a JSON keyfile\n     */\n\n  }, {\n    key: \"createFromJson\",\n    value: function createFromJson(_ref, ignoreChecksum) {\n      var address = _ref.address,\n          encoded = _ref.encoded,\n          _ref$encoding = _ref.encoding,\n          content = _ref$encoding.content,\n          type = _ref$encoding.type,\n          version = _ref$encoding.version,\n          meta = _ref.meta;\n      assert(version !== '3' || content[0] === 'pkcs8', function () {\n        return \"Unable to decode non-pkcs8 type, [\".concat(content.join(','), \"] found}\");\n      });\n      var cryptoType = version === '0' || !Array.isArray(content) ? this.type : content[1];\n      var encType = !Array.isArray(type) ? [type] : type;\n      assert(['ed25519', 'sr25519', 'ecdsa', 'ethereum'].includes(cryptoType), \"Unknown crypto type \".concat(cryptoType)); // Here the address and publicKey are 32 bytes and isomorphic. This is why the address field needs to be the public key for ethereum type pairs\n\n      var publicKey = isHex(address) ? hexToU8a(address) : this.decodeAddress(address, ignoreChecksum);\n      var decoded = isHex(encoded) ? hexToU8a(encoded) : base64Decode(encoded);\n      return createPair({\n        toSS58: this.encodeAddress,\n        type: cryptoType\n      }, {\n        publicKey: publicKey,\n        secretKey: new Uint8Array()\n      }, meta, decoded, encType);\n    }\n    /**\n     * @name createFromPair\n     * @summary Creates a pair from an explicit publicKey/secreteKey combination\n     */\n\n  }, {\n    key: \"createFromPair\",\n    value: function createFromPair(pair) {\n      var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.type;\n      return createPair({\n        toSS58: this.encodeAddress,\n        type: type\n      }, pair, meta, null);\n    }\n    /**\n     * @name createFromUri\n     * @summary Creates a Keypair from an suri\n     * @description This creates a pair from the suri, but does not add it to the keyring\n     */\n\n  }, {\n    key: \"createFromUri\",\n    value: function createFromUri(_suri) {\n      var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.type;\n      // here we only aut-add the dev phrase if we have a hard-derived path\n      var suri = _suri.startsWith('//') ? \"\".concat(DEV_PHRASE).concat(_suri) : _suri;\n\n      var _keyExtractSuri = keyExtractSuri(suri),\n          derivePath = _keyExtractSuri.derivePath,\n          password = _keyExtractSuri.password,\n          path = _keyExtractSuri.path,\n          phrase = _keyExtractSuri.phrase;\n\n      var seed;\n      var isPhraseHex = isHex(phrase, 256);\n\n      if (isPhraseHex) {\n        seed = hexToU8a(phrase);\n      } else {\n        var str = phrase;\n        var parts = str.split(' ');\n\n        if ([12, 15, 18, 21, 24].includes(parts.length)) {\n          seed = type === 'ethereum' ? mnemonicToLegacySeed(phrase, '', false, 64) : mnemonicToMiniSecret(phrase, password);\n        } else {\n          assert(str.length <= 32, 'specified phrase is not a valid mnemonic and is invalid as a raw seed at > 32 bytes');\n          seed = stringToU8a(str.padEnd(32));\n        }\n      }\n\n      var derived = type === 'ethereum' ? isPhraseHex ? keypairFromSeed[type](seed) // for eth, if the private key is provided as suri, it must be derived only once\n      : hdEthereum(seed, derivePath.substring(1)) : keyFromPath(keypairFromSeed[type](seed), path, type);\n      return createPair({\n        toSS58: this.encodeAddress,\n        type: type\n      }, derived, meta, null);\n    }\n    /**\n     * @name encodeAddress\n     * @description Encodes the input into an ss58 representation\n     */\n\n    /**\n     * @name getPair\n     * @summary Retrieves an account keyring pair from the Keyring Pair Dictionary, given an account address\n     * @description Returns a keyring pair value from the keyring pair dictionary by performing\n     * a key lookup using the provided account address or public key (after decoding it).\n     */\n\n  }, {\n    key: \"getPair\",\n    value: function getPair(address) {\n      return _classPrivateFieldLooseBase(this, _pairs)[_pairs].get(address);\n    }\n    /**\n     * @name getPairs\n     * @summary Retrieves all account keyring pairs from the Keyring Pair Dictionary\n     * @description Returns an array list of all the keyring pair values that are stored in the keyring pair dictionary.\n     */\n\n  }, {\n    key: \"getPairs\",\n    value: function getPairs() {\n      return _classPrivateFieldLooseBase(this, _pairs)[_pairs].all();\n    }\n    /**\n     * @name getPublicKeys\n     * @summary Retrieves Public Keys of all Keyring Pairs stored in the Keyring Pair Dictionary\n     * @description Returns an array list of all the public keys associated with each of the keyring pair values that are stored in the keyring pair dictionary.\n     */\n\n  }, {\n    key: \"getPublicKeys\",\n    value: function getPublicKeys() {\n      return _classPrivateFieldLooseBase(this, _pairs)[_pairs].all().map(function (_ref2) {\n        var publicKey = _ref2.publicKey;\n        return publicKey;\n      });\n    }\n    /**\n     * @name removePair\n     * @description Deletes the provided input address or public key from the stored Keyring Pair Dictionary.\n     */\n\n  }, {\n    key: \"removePair\",\n    value: function removePair(address) {\n      _classPrivateFieldLooseBase(this, _pairs)[_pairs].remove(address);\n    }\n    /**\n     * @name setSS58Format;\n     * @description Sets the ss58 format for the keyring\n     */\n\n  }, {\n    key: \"setSS58Format\",\n    value: function setSS58Format(ss58) {\n      _classPrivateFieldLooseBase(this, _ss)[_ss] = ss58;\n    }\n    /**\n     * @name toJson\n     * @summary Returns a JSON object associated with the input argument that contains metadata assocated with an account\n     * @description Returns a JSON object containing the metadata associated with an account\n     * when valid address or public key and when the account passphrase is provided if the account secret\n     * is not already unlocked and available in memory. Note that in [Polkadot-JS Apps](https://github.com/polkadot-js/apps) the user\n     * may backup their account to a JSON file that contains this information.\n     */\n\n  }, {\n    key: \"toJson\",\n    value: function toJson(address, passphrase) {\n      return _classPrivateFieldLooseBase(this, _pairs)[_pairs].get(address).toJson(passphrase);\n    }\n  }]);\n\n  return Keyring;\n}();","map":null,"metadata":{},"sourceType":"module"}