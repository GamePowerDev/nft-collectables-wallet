{"ast":null,"code":"import _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { BN_ZERO } from '@polkadot/util';\nimport { combineLatest, of } from '@polkadot/x-rxjs';\nimport { map, switchMap } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.js\";\n\nfunction mapResult(_ref) {\n  var _ref2 = _slicedToArray(_ref, 4),\n      result = _ref2[0],\n      validators = _ref2[1],\n      heartbeats = _ref2[2],\n      numBlocks = _ref2[3];\n\n  validators.forEach(function (validator, index) {\n    var validatorId = validator.toString();\n    var blockCount = numBlocks[index];\n    var hasMessage = !heartbeats[index].isEmpty;\n    var prev = result[validatorId];\n\n    if (!prev || prev.hasMessage !== hasMessage || !prev.blockCount.eq(blockCount)) {\n      result[validatorId] = {\n        blockCount: blockCount,\n        hasMessage: hasMessage,\n        isOnline: hasMessage || blockCount.gt(BN_ZERO)\n      };\n    }\n  });\n  return result;\n}\n/**\n * @description Return a boolean array indicating whether the passed accounts had received heartbeats in the current session\n */\n\n\nexport function receivedHeartbeats(instanceId, api) {\n  return memo(instanceId, function () {\n    var _api$query$imOnline;\n\n    return (_api$query$imOnline = api.query.imOnline) !== null && _api$query$imOnline !== void 0 && _api$query$imOnline.receivedHeartbeats ? api.derive.staking.overview().pipe(switchMap(function (_ref3) {\n      var currentIndex = _ref3.currentIndex,\n          validators = _ref3.validators;\n      return combineLatest([of({}), of(validators), api.query.imOnline.receivedHeartbeats.multi(validators.map(function (_address, index) {\n        return [currentIndex, index];\n      })), api.query.imOnline.authoredBlocks.multi(validators.map(function (address) {\n        return [currentIndex, address];\n      }))]);\n    }), map(mapResult)) : of({});\n  });\n}","map":null,"metadata":{},"sourceType":"module"}