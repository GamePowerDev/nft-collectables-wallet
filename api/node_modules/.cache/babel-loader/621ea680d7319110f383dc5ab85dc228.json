{"ast":null,"code":"import _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, of } from '@polkadot/x-rxjs';\nimport { catchError, map } from '@polkadot/x-rxjs/operators';\nimport { createHeaderExtended } from \"../type/index.js\";\nimport { memo } from \"../util/index.js\";\n/**\n * @name getHeader\n * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.\n * @returns An array containing the block header and the block author\n * @description Get a specific block header and extend it with the author\n * @example\n * <BR>\n *\n * ```javascript\n * const { author, number } = await api.derive.chain.getHeader('0x123...456');\n *\n * console.log(`block #${number} was authored by ${author}`);\n * ```\n */\n\nexport function getHeader(instanceId, api) {\n  return memo(instanceId, function (hash) {\n    return combineLatest([api.rpc.chain.getHeader(hash), api.query.session ? api.query.session.validators.at(hash) : of([])]).pipe(map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          header = _ref2[0],\n          validators = _ref2[1];\n\n      return createHeaderExtended(header.registry, header, validators);\n    }), catchError(function () {\n      return (// where rpc.chain.getHeader throws, we will land here - it can happen that\n        // we supplied an invalid hash. (Due to defaults, storeage will have an\n        // empty value, so only the RPC is affected). So return undefined\n        of()\n      );\n    }));\n  });\n}","map":null,"metadata":{},"sourceType":"module"}