{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '@polkadot/util';\nimport { bip39ToSeed, isReady } from '@polkadot/wasm-crypto';\nimport { mnemonicToSeedSync } from \"./bip39.js\";\nimport { mnemonicValidate } from \"./validate.js\";\n/**\n * @name toSeed\n * @summary Creates a valid Ethereum/Bitcoin-compatible seed from a mnemonic input\n * @example\n * <BR>\n *\n * ```javascript\n * import { mnemonicGenerate, mnemonicToBip39, mnemonicValidate } from '@polkadot/util-crypto';\n *\n * const mnemonic = mnemonicGenerate(); // => string\n * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean\n *\n * if (isValidMnemonic) {\n *   console.log(`Seed generated from mnemonic: ${mnemonicToBip39(mnemonic)}`); => u8a\n * }\n * ```\n */\n\nexport function mnemonicToLegacySeed(mnemonic) {\n  var password = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var onlyJs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var byteLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 32;\n  assert(mnemonicValidate(mnemonic), 'Invalid bip39 mnemonic specified');\n  assert([32, 64].includes(byteLength), \"Invalid seed length \".concat(byteLength, \", expected 32 or 64\"));\n\n  if (byteLength && byteLength === 32) {\n    return isReady() && !onlyJs ? bip39ToSeed(mnemonic, password) : mnemonicToSeedSync(mnemonic, password).subarray(0, 32);\n  } else if (byteLength === 64) {\n    return mnemonicToSeedSync(mnemonic, password);\n  } else {\n    return new Uint8Array();\n  }\n}","map":null,"metadata":{},"sourceType":"module"}