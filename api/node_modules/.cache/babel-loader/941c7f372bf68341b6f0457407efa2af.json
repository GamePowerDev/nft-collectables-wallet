{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { xglobal } from '@polkadot/x-global';\nimport { isFunction } from \"./is/function.js\";\nimport { isString } from \"./is/string.js\";\nimport { assert } from \"./assert.js\";\nvar DEDUPE = 'Either remove and explicitly install matching versions or dedupe using your package manager.\\nThe following conflicting packages were found:';\n/** @internal */\n\nfunction getEntry(name) {\n  var _global = xglobal;\n\n  if (!_global.__polkadotjs) {\n    _global.__polkadotjs = {};\n  }\n\n  if (!_global.__polkadotjs[name]) {\n    _global.__polkadotjs[name] = [];\n  }\n\n  return _global.__polkadotjs[name];\n}\n\nfunction getVersionLength(all) {\n  return all.reduce(function (max, _ref) {\n    var version = _ref.version;\n    return Math.max(max, version.length);\n  }, 0);\n}\n/** @internal */\n\n\nfunction flattenInfos(all) {\n  var verLength = getVersionLength(all);\n  return all.map(function (_ref2) {\n    var name = _ref2.name,\n        version = _ref2.version;\n    return \"\\t\".concat(version.padEnd(verLength), \"\\t\").concat(name);\n  }).join('\\n');\n}\n/** @internal */\n\n\nfunction flattenVersions(entry) {\n  var all = entry.map(function (version) {\n    return isString(version) ? {\n      version: version\n    } : version;\n  });\n  var verLength = getVersionLength(all);\n  return all.map(function (_ref3) {\n    var path = _ref3.path,\n        version = _ref3.version;\n    return \"\\t\".concat(version.padEnd(verLength), \"\\t\").concat(!path || path.length < 5 ? '<unknown>' : path);\n  }).join('\\n');\n}\n/** @internal */\n\n\nfunction getPath(pathOrFn) {\n  if (isFunction(pathOrFn)) {\n    try {\n      return pathOrFn() || '';\n    } catch (error) {\n      return '';\n    }\n  }\n\n  return pathOrFn || '';\n}\n/**\n * @name detectPackage\n * @summary Checks that a specific package is only imported once\n */\n\n\nexport function detectPackage(_ref4, pathOrFn) {\n  var name = _ref4.name,\n      version = _ref4.version;\n  var deps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  assert(name.startsWith('@polkadot'), \"Invalid package descriptor \".concat(name));\n  var entry = getEntry(name);\n  entry.push({\n    path: getPath(pathOrFn),\n    version: version\n  });\n\n  if (entry.length !== 1) {\n    console.warn(\"\".concat(name, \" has multiple versions, ensure that there is only one installed.\\n\").concat(DEDUPE, \"\\n\").concat(flattenVersions(entry)));\n  } else {\n    var mismatches = deps.filter(function (d) {\n      return d && d.version !== version;\n    });\n\n    if (mismatches.length) {\n      console.warn(\"\".concat(name, \" requires direct dependencies exactly matching version \").concat(version, \".\\n\").concat(DEDUPE, \"\\n\").concat(flattenInfos(mismatches)));\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}