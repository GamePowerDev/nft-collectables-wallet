{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isU8a } from '@polkadot/util';\nimport { decodeAddress } from '@polkadot/util-crypto';\nimport { of } from '@polkadot/x-rxjs';\nimport { map } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.js\";\n\nfunction retrieve(api, address) {\n  try {\n    // yes, this can fail, don't care too much, catch will catch it\n    var decoded = isU8a(address) ? address : decodeAddress((address || '').toString());\n\n    if (decoded.length > 8) {\n      var accountId = api.registry.createType('AccountId', decoded);\n      return api.derive.accounts.idToIndex(accountId).pipe(map(function (accountIndex) {\n        return [accountId, accountIndex];\n      }));\n    }\n\n    var accountIndex = api.registry.createType('AccountIndex', decoded);\n    return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map(function (accountId) {\n      return [accountId, accountIndex];\n    }));\n  } catch (error) {\n    return of([undefined, undefined]);\n  }\n}\n/**\n * @name idAndIndex\n * @param {(Address | AccountId | AccountIndex | Uint8Array | string | null)} address - An accounts address in various formats.\n * @description  An array containing the [[AccountId]] and [[AccountIndex]] as optional values.\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {\n *   console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);\n * });\n * ```\n */\n\n\nexport function idAndIndex(instanceId, api) {\n  return memo(instanceId, function (address) {\n    return retrieve(api, address);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}