{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport BN from 'bn.js';\nimport { u8aToBn, u8aToU8a } from \"../u8a/index.js\";\nimport { DEFAULT_BITLENGTH } from \"./defaults.js\";\n/**\n * @name compactFromU8a\n * @description Retrievs the offset and encoded length from a compact-prefixed value\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactFromU8a } from '@polkadot/util';\n *\n * const [offset, length] = compactFromU8a(new Uint8Array([254, 255, 3, 0]), 32));\n *\n * console.log('value offset=', offset, 'length=', length); // 4, 0xffff\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport function compactFromU8a(_input) {\n  var bitLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_BITLENGTH;\n  var input = u8aToU8a(_input);\n  var flag = input[0] & 3;\n\n  if (flag === 0) {\n    return [1, new BN(input[0]).shrn(2)];\n  } else if (flag === 1) {\n    return [2, u8aToBn(input.slice(0, 2), true).shrn(2)];\n  } else if (flag === 2) {\n    return [4, u8aToBn(input.slice(0, 4), true).shrn(2)];\n  }\n\n  var length = new BN(input[0]).shrn(2) // clear flag\n  .addn(4) // add 4 for base length\n  .toNumber();\n  var offset = 1 + length;\n  return [offset, u8aToBn(input.subarray(1, offset), true)];\n}","map":null,"metadata":{},"sourceType":"module"}