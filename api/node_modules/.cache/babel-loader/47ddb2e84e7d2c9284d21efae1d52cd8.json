{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// adapted from https://github.com/multiformats/js-multibase/blob/424709195b46ffb1d6f2f69a7707598ebe751e5e/src/rfc4648.js\nimport { u8aToU8a } from '@polkadot/util';\nimport { BASE32_ALPHABET, BITS_PER_CHAR } from \"./bs32.js\";\nvar MASK = (1 << BITS_PER_CHAR) - 1;\n/**\n * @name base32Encode\n * @summary Creates a base32 value.\n * @description\n * From the provided input, create the base32 and return the result as a string.\n */\n\nexport function base32Encode(value) {\n  var ipfsCompat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var u8a = u8aToU8a(value);\n  var out = '';\n  var bits = 0;\n  var buffer = 0;\n\n  for (var i = 0; i < u8a.length; ++i) {\n    buffer = buffer << 8 | u8a[i];\n    bits += 8;\n\n    while (bits > BITS_PER_CHAR) {\n      bits -= BITS_PER_CHAR;\n      out += BASE32_ALPHABET[MASK & buffer >> bits];\n    }\n  }\n\n  if (bits) {\n    out += BASE32_ALPHABET[MASK & buffer << BITS_PER_CHAR - bits];\n  }\n\n  return ipfsCompat ? \"b\".concat(out) : out;\n}","map":null,"metadata":{},"sourceType":"module"}