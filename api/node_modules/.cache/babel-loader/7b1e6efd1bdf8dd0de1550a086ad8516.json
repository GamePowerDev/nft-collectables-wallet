{"ast":null,"code":"import _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _get from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { from } from '@polkadot/x-rxjs';\nimport { ApiBase } from \"../base/index.js\";\nexport function decorateMethod(method) {\n  return method;\n}\n/**\n * # @polkadot/api/rx\n *\n *  ## Overview\n *\n * @name ApiRx\n *\n * @description\n * ApiRx is a powerful RxJS Observable wrapper around the RPC and interfaces on the Polkadot network. As a full Observable API, all interface calls return RxJS Observables, including the static `.create(...)`. In the same fashion and subscription-based methods return long-running Observables that update with the latest values.\n *\n * The API is well suited to real-time applications where the latest state is needed, unlocking the subscription-based features of Polkadot (and Substrate) clients. Some familiarity with RxJS is a requirement to use the API, however just understanding `.subscribe` and `.pipe` on Observables will unlock full-scale use thereof.\n *\n * @see [[ApiPromise]]\n *\n * ## Usage\n *\n * Making rpc calls -\n * <BR>\n *\n * ```javascript\n * import ApiRx from '@polkadot/api/rx';\n *\n * // initialize via Promise & static create\n * const api = await ApiRx.create().toPromise();\n *\n * // make a call to retrieve the current network head\n * api.rpc.chain.subscribeNewHeads().subscribe((header) => {\n *   console.log(`Chain is at #${header.number}`);\n * });\n * ```\n * <BR>\n *\n * Subscribing to chain state -\n * <BR>\n *\n * ```javascript\n * import { combineLatest } from '@polkadot/x-rxjs';\n * import { pairwise, switchMap } from '@polkadot/x-rxjs/operators';\n * import { ApiRx, WsProvider } from '@polkadot/api';\n *\n *\n * // initialize a provider with a specific endpoint\n * const provider = new WsProvider('wss://example.com:9944')\n *\n * // initialize via isReady & new with specific provider\n * new ApiRx({ provider })\n *   .isReady\n *   .pipe(\n *     switchMap((api) =>\n *       combineLatest([\n *         api.query.timestamp.blockPeriod(),\n *         api.query.timestamp.now().pipe(pairwise())\n *       ])\n *     )\n *   )\n *   .subscribe(([blockPeriod, timestamp]) => {\n *      const elapsed = timestamp[1].toNumber() - timestamp[0].toNumber();\n *      console.log(`timestamp ${timestamp[1]} \\nelapsed ${elapsed} \\n(${blockPeriod}s target)`);\n *   });\n * ```\n * <BR>\n *\n * Submitting a transaction -\n * <BR>\n *\n * ```javascript\n * import { first, switchMap } from '@polkadot/x-rxjs/operators';\n * import ApiRx from '@polkadot/api/rx';\n *\n * // import the test keyring (already has dev keys for Alice, Bob, Charlie, Eve & Ferdie)\n * import testingPairs from '@polkadot/keyring/testingPairs';\n * const keyring = testingPairs();\n *\n * // get api via Promise\n * const api = await ApiRx.create().toPromise();\n *\n * // retrieve nonce for the account\n * api.query.system\n *   .account(keyring.alice.address)\n *   .pipe(\n *      first(),\n *      // pipe nonce into transfer\n *      switchMap(([nonce]) =>\n *        api.tx.balances\n *          // create transfer\n *          .transfer(keyring.bob.address, 12345)\n *          // sign the transaction\n *          .sign(keyring.alice, { nonce })\n *          // send the transaction\n *          .send()\n *      )\n *   )\n *   // subscribe to overall result\n *   .subscribe(({ status }) => {\n *     if (status.isInBlock) {\n *       console.log('Completed at block hash', status.asFinalized.toHex());\n *     }\n *   });\n * ```\n */\n\nvar _isReadyRx = _classPrivateFieldLooseKey(\"isReadyRx\");\n\nexport var ApiRx = /*#__PURE__*/function (_ApiBase) {\n  _inherits(ApiRx, _ApiBase);\n\n  var _super = _createSuper(ApiRx);\n\n  /**\n   * @description Create an instance of the ApiRx class\n   * @param options Options to create an instance. Can be either [[ApiOptions]] or [[WsProvider]]\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * import { switchMap } from '@polkadot/x-rxjs/operators';\n   * import Api from '@polkadot/api/rx';\n   *\n   * new Api().isReady\n   *   .pipe(\n   *     switchMap((api) =>\n   *       api.rpc.chain.subscribeNewHeads()\n   *   ))\n   *   .subscribe((header) => {\n   *     console.log(`new block #${header.number.toNumber()}`);\n   *   });\n   * ```\n   */\n  function ApiRx(options) {\n    var _thisSuper, _this;\n\n    _classCallCheck(this, ApiRx);\n\n    _this = _super.call(this, options, 'rxjs', decorateMethod);\n    Object.defineProperty(_assertThisInitialized(_this), _isReadyRx, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _isReadyRx)[_isReadyRx] = from( // You can create an observable from an event, however my mind groks this form better\n    new Promise(function (resolve) {\n      _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(ApiRx.prototype)), \"on\", _thisSuper).call(_thisSuper, 'ready', function () {\n        resolve(_assertThisInitialized(_this));\n      });\n    }));\n    return _this;\n  }\n  /**\n   * @description Observable that returns the first time we are connected and loaded\n   */\n\n\n  _createClass(ApiRx, [{\n    key: \"isReady\",\n    get: function get() {\n      return _classPrivateFieldLooseBase(this, _isReadyRx)[_isReadyRx];\n    }\n    /**\n     * @description Returns a clone of this ApiRx instance (new underlying provider connection)\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new ApiRx(_objectSpread(_objectSpread({}, this._options), {}, {\n        source: this\n      }));\n    }\n  }], [{\n    key: \"create\",\n    value:\n    /**\n     * @description Creates an ApiRx instance using the supplied provider. Returns an Observable containing the actual Api instance.\n     * @param options options that is passed to the class constructor. Can be either [[ApiOptions]] or [[WsProvider]]\n     * @example\n     * <BR>\n     *\n     * ```javascript\n     * import { switchMap } from '@polkadot/x-rxjs/operators';\n     * import Api from '@polkadot/api/rx';\n     *\n     * Api.create()\n     *   .pipe(\n     *     switchMap((api) =>\n     *       api.rpc.chain.subscribeNewHeads()\n     *   ))\n     *   .subscribe((header) => {\n     *     console.log(`new block #${header.number.toNumber()}`);\n     *   });\n     * ```\n     */\n    function create(options) {\n      return new ApiRx(options).isReady;\n    }\n  }]);\n\n  return ApiRx;\n}(ApiBase);","map":null,"metadata":{},"sourceType":"module"}