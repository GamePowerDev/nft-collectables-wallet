{"ast":null,"code":"import _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { base58Decode } from \"../base58/decode.js\";\nimport { checkAddressChecksum } from \"./checksum.js\";\nimport { defaults } from \"./defaults.js\";\n/**\n * @name checkAddress\n * @summary Validates an ss58 address.\n * @description\n * From the provided input, validate that the address is a valid input.\n */\n\nexport function checkAddress(address, prefix) {\n  var decoded;\n\n  try {\n    decoded = base58Decode(address);\n  } catch (error) {\n    return [false, error.message];\n  }\n\n  var _checkAddressChecksum = checkAddressChecksum(decoded),\n      _checkAddressChecksum2 = _slicedToArray(_checkAddressChecksum, 4),\n      isValid = _checkAddressChecksum2[0],\n      ss58Decoded = _checkAddressChecksum2[3];\n\n  if (ss58Decoded !== prefix) {\n    return [false, \"Prefix mismatch, expected \".concat(prefix, \", found \").concat(ss58Decoded)];\n  } else if (!defaults.allowedEncodedLengths.includes(decoded.length)) {\n    return [false, 'Invalid decoded address length'];\n  }\n\n  return [isValid, isValid ? null : 'Invalid decoded address checksum'];\n}","map":null,"metadata":{},"sourceType":"module"}