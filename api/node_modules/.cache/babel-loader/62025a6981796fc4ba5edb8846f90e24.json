{"ast":null,"code":"import _toConsumableArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { hexToU8a, isBoolean, isFunction, isHex, isObject, isU8a, isUndefined, stringCamelCase, u8aConcat, u8aToHex } from '@polkadot/util';\nimport { compareMap, decodeU8a, mapToTypeMap } from \"./utils/index.js\";\n/** @internal */\n\nfunction decodeStructFromObject(registry, Types, value, jsonMap) {\n  var jsonObj;\n  return Object.keys(Types).reduce(function (raw, key, index) {\n    // The key in the JSON can be snake_case (or other cases), but in our\n    // Types, result or any other maps, it's camelCase\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    var jsonKey = jsonMap.get(key) && !value[key] ? jsonMap.get(key) : key;\n\n    try {\n      if (Array.isArray(value)) {\n        // TS2322: Type 'Codec' is not assignable to type 'T[keyof S]'.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n        raw[key] = value[index] instanceof Types[key] ? value[index] : new Types[key](registry, value[index]);\n      } else if (value instanceof Map) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        var mapped = value.get(jsonKey); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n        raw[key] = mapped instanceof Types[key] ? mapped : new Types[key](registry, mapped);\n      } else if (isObject(value)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        var assign = value[jsonKey];\n\n        if (isUndefined(assign)) {\n          if (isUndefined(jsonObj)) {\n            jsonObj = Object.entries(value).reduce(function (all, _ref) {\n              var _ref2 = _slicedToArray(_ref, 2),\n                  key = _ref2[0],\n                  value = _ref2[1];\n\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n              all[stringCamelCase(key)] = value;\n              return all;\n            }, {});\n          } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n\n          assign = jsonObj[jsonKey];\n        } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n\n\n        raw[key] = assign instanceof Types[key] ? assign : new Types[key](registry, assign);\n      } else {\n        throw new Error(\"Cannot decode value \".concat(JSON.stringify(value)));\n      }\n    } catch (error) {\n      var type = Types[key].name;\n\n      try {\n        type = new Types[key](registry).toRawType();\n      } catch (error) {// ignore\n      }\n\n      throw new Error(\"Struct: failed on \".concat(jsonKey, \": \").concat(type, \":: \").concat(error.message));\n    }\n\n    return raw;\n  }, {});\n}\n/**\n * Decode input to pass into constructor.\n *\n * @param Types - Types definition.\n * @param value - Value to decode, one of:\n * - null\n * - undefined\n * - hex\n * - Uint8Array\n * - object with `{ key1: value1, key2: value2 }`, assuming `key1` and `key2`\n * are also keys in `Types`\n * - array with `[value1, value2]` assuming the array has the same length as\n * `Object.keys(Types)`\n * @param jsonMap\n * @internal\n */\n\n\nfunction decodeStruct(registry, Types, value, jsonMap) {\n  if (isHex(value)) {\n    return decodeStruct(registry, Types, hexToU8a(value), jsonMap);\n  } else if (isU8a(value)) {\n    var values = decodeU8a(registry, value, Object.values(Types)); // Transform array of values to {key: value} mapping\n\n    return Object.keys(Types).reduce(function (raw, key, index) {\n      // TS2322: Type 'Codec' is not assignable to type 'T[keyof S]'.\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      raw[key] = values[index];\n      return raw;\n    }, {});\n  } else if (!value) {\n    return {};\n  } // We assume from here that value is a JS object (Array, Map, Object)\n\n\n  return decodeStructFromObject(registry, Types, value, jsonMap);\n}\n/**\n * @name Struct\n * @description\n * A Struct defines an Object with key-value pairs - where the values are Codec values. It removes\n * a lot of repetition from the actual coding, define a structure type, pass it the key/Codec\n * values in the constructor and it manages the decoding. It is important that the constructor\n * values matches 100% to the order in th Rust code, i.e. don't go crazy and make it alphabetical,\n * it needs to decoded in the specific defined order.\n * @noInheritDoc\n */\n\n\nvar _jsonMap = _classPrivateFieldLooseKey(\"jsonMap\");\n\nvar _Types = _classPrivateFieldLooseKey(\"Types\");\n\nexport var Struct = /*#__PURE__*/function (_Map) {\n  _inherits(Struct, _Map);\n\n  var _super = _createSuper(Struct);\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  function Struct(registry, Types) {\n    var _this;\n\n    var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var jsonMap = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Map();\n\n    _classCallCheck(this, Struct);\n\n    _this = _super.call(this, Object.entries(decodeStruct(registry, mapToTypeMap(registry, Types), value, jsonMap)));\n    _this.registry = void 0;\n    _this.createdAtHash = void 0;\n    Object.defineProperty(_assertThisInitialized(_this), _jsonMap, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_assertThisInitialized(_this), _Types, {\n      writable: true,\n      value: void 0\n    });\n    _this.registry = registry;\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _jsonMap)[_jsonMap] = jsonMap;\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _Types)[_Types] = mapToTypeMap(registry, Types);\n    return _this;\n  }\n\n  _createClass(Struct, [{\n    key: \"defKeys\",\n    get:\n    /**\n     * @description The available keys for this enum\n     */\n    function get() {\n      return Object.keys(_classPrivateFieldLooseBase(this, _Types)[_Types]);\n    }\n    /**\n     * @description Checks if the value is an empty value\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      var items = this.toArray();\n\n      for (var i = 0; i < items.length; i++) {\n        if (!items[i].isEmpty) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    /**\n     * @description Returns the Type description to sthe structure\n     */\n\n  }, {\n    key: \"Type\",\n    get: function get() {\n      var _this2 = this;\n\n      return Object.entries(_classPrivateFieldLooseBase(this, _Types)[_Types]).reduce(function (result, _ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            key = _ref4[0],\n            Type = _ref4[1];\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        result[key] = new Type(_this2.registry).toRawType();\n        return result;\n      }, {});\n    }\n    /**\n     * @description The length of the value when encoded as a Uint8Array\n     */\n\n  }, {\n    key: \"encodedLength\",\n    get: function get() {\n      return this.toArray().reduce(function (length, entry) {\n        length += entry.encodedLength;\n        return length;\n      }, 0);\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return compareMap(this, other);\n    }\n    /**\n     * @description Returns a specific names entry in the structure\n     * @param name The name of the entry to retrieve\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      return _get(_getPrototypeOf(Struct.prototype), \"get\", this).call(this, name);\n    }\n    /**\n     * @description Returns the values of a member at a specific index (Rather use get(name) for performance)\n     */\n\n  }, {\n    key: \"getAtIndex\",\n    value: function getAtIndex(index) {\n      return this.toArray()[index];\n    }\n    /**\n     * @description Converts the Object to an standard JavaScript Array\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return _toConsumableArray(this.values());\n    }\n    /**\n     * @description Returns a hex string representation of the value\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return u8aToHex(this.toU8a());\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman(isExtended) {\n      var _this3 = this;\n\n      return _toConsumableArray(this.keys()).reduce(function (json, key) {\n        var value = _this3.get(key);\n\n        json[key] = value && value.toHuman(isExtended);\n        return json;\n      }, {});\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _this4 = this;\n\n      return _toConsumableArray(this.keys()).reduce(function (json, key) {\n        var jsonKey = _classPrivateFieldLooseBase(_this4, _jsonMap)[_jsonMap].get(key) || key;\n\n        var value = _this4.get(key);\n\n        json[jsonKey] = value && value.toJSON();\n        return json;\n      }, {});\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return JSON.stringify(Struct.typesToMap(this.registry, _classPrivateFieldLooseBase(this, _Types)[_Types]));\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return JSON.stringify(this.toJSON());\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      // we have keyof S here, cast to string to make it compatible with isBare\n      var entries = _toConsumableArray(this.entries());\n\n      return u8aConcat.apply(void 0, _toConsumableArray(entries // eslint-disable-next-line @typescript-eslint/unbound-method\n      .filter(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            value = _ref6[1];\n\n        return isFunction(value === null || value === void 0 ? void 0 : value.toU8a);\n      }).map(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            key = _ref8[0],\n            value = _ref8[1];\n\n        return value.toU8a(!isBare || isBoolean(isBare) ? isBare : isBare[key]);\n      })));\n    }\n  }], [{\n    key: \"with\",\n    value: function _with(Types, jsonMap) {\n      return /*#__PURE__*/function (_Struct) {\n        _inherits(_class, _Struct);\n\n        var _super2 = _createSuper(_class);\n\n        function _class(registry, value) {\n          var _this5;\n\n          _classCallCheck(this, _class);\n\n          _this5 = _super2.call(this, registry, Types, value, jsonMap);\n          Object.keys(Types).forEach(function (key) {\n            isUndefined(_this5[key]) && Object.defineProperty(_assertThisInitialized(_this5), key, {\n              enumerable: true,\n              get: function get() {\n                return _this5.get(key);\n              }\n            });\n          });\n          return _this5;\n        }\n\n        return _class;\n      }(Struct);\n    }\n  }, {\n    key: \"typesToMap\",\n    value: function typesToMap(registry, Types) {\n      return Object.entries(Types).reduce(function (result, _ref9) {\n        var _ref10 = _slicedToArray(_ref9, 2),\n            key = _ref10[0],\n            Type = _ref10[1];\n\n        result[key] = registry.getClassName(Type) || new Type(registry).toRawType();\n        return result;\n      }, {});\n    }\n  }]);\n\n  return Struct;\n}( /*#__PURE__*/_wrapNativeSuper(Map));","map":null,"metadata":{},"sourceType":"module"}