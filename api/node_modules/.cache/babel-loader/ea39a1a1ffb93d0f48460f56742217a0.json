{"ast":null,"code":"import _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { Enum } from \"../../codec/Enum.js\";\nimport { Struct } from \"../../codec/Struct.js\";\nimport { sign as _sign } from \"../util.js\";\n/**\n * @name GenericExtrinsicPayloadV4\n * @description\n * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based\n * on the contents included\n */\n\nvar _signOptions = _classPrivateFieldLooseKey(\"signOptions\");\n\nexport var GenericExtrinsicPayloadV4 = /*#__PURE__*/function (_Struct) {\n  _inherits(GenericExtrinsicPayloadV4, _Struct);\n\n  var _super = _createSuper(GenericExtrinsicPayloadV4);\n\n  function GenericExtrinsicPayloadV4(registry, value) {\n    var _this;\n\n    _classCallCheck(this, GenericExtrinsicPayloadV4);\n\n    _this = _super.call(this, registry, _objectSpread(_objectSpread({\n      method: 'Bytes'\n    }, registry.getSignedExtensionTypes()), registry.getSignedExtensionExtra()), value); // Do detection for the type of extrinsic, in the case of MultiSignature this is an\n    // enum, in the case of AnySignature, this is a Hash only (may be 64 or 65 bytes)\n\n    Object.defineProperty(_assertThisInitialized(_this), _signOptions, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _signOptions)[_signOptions] = {\n      withType: registry.createType('ExtrinsicSignature') instanceof Enum\n    };\n    return _this;\n  }\n  /**\n   * @description The block [[Hash]] the signature applies to (mortal/immortal)\n   */\n\n\n  _createClass(GenericExtrinsicPayloadV4, [{\n    key: \"blockHash\",\n    get: function get() {\n      return this.get('blockHash');\n    }\n    /**\n     * @description The [[ExtrinsicEra]]\n     */\n\n  }, {\n    key: \"era\",\n    get: function get() {\n      return this.get('era');\n    }\n    /**\n     * @description The genesis [[Hash]] the signature applies to (mortal/immortal)\n     */\n\n  }, {\n    key: \"genesisHash\",\n    get: function get() {\n      return this.get('genesisHash');\n    }\n    /**\n     * @description The [[Bytes]] contained in the payload\n     */\n\n  }, {\n    key: \"method\",\n    get: function get() {\n      return this.get('method');\n    }\n    /**\n     * @description The [[Index]]\n     */\n\n  }, {\n    key: \"nonce\",\n    get: function get() {\n      return this.get('nonce');\n    }\n    /**\n     * @description The specVersion for this signature\n     */\n\n  }, {\n    key: \"specVersion\",\n    get: function get() {\n      return this.get('specVersion');\n    }\n    /**\n     * @description The tip [[Balance]]\n     */\n\n  }, {\n    key: \"tip\",\n    get: function get() {\n      return this.get('tip');\n    }\n    /**\n     * @description The transactionVersion for this signature\n     */\n\n  }, {\n    key: \"transactionVersion\",\n    get: function get() {\n      return this.get('transactionVersion');\n    }\n    /**\n     * @description Sign the payload with the keypair\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign(signerPair) {\n      // NOTE The `toU8a({ method: true })` argument is absolutely critical - we don't want the method (Bytes)\n      // to have the length prefix included. This means that the data-as-signed is un-decodable,\n      // but is also doesn't need the extra information, only the pure data (and is not decoded)\n      // ... The same applies to V1..V3, if we have a V5, carry move this comment to latest\n      return _sign(this.registry, signerPair, this.toU8a({\n        method: true\n      }), _classPrivateFieldLooseBase(this, _signOptions)[_signOptions]);\n    }\n  }]);\n\n  return GenericExtrinsicPayloadV4;\n}(Struct);","map":null,"metadata":{},"sourceType":"module"}