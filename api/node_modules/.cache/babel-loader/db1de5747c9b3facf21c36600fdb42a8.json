{"ast":null,"code":"import _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _inherits from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { compactFromU8a, compactToU8a, isBigInt, isBn, isNumber, isString } from '@polkadot/util';\nimport { typeToConstructor } from \"./utils/index.js\";\n/**\n * @name Compact\n * @description\n * A compact length-encoding codec wrapper. It performs the same function as Length, however\n * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly\n * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking\n * a number and making the compact representation thereof\n */\n\nvar _Type = _classPrivateFieldLooseKey(\"Type\");\n\nvar _raw = _classPrivateFieldLooseKey(\"raw\");\n\nexport var Compact = /*#__PURE__*/function () {\n  function Compact(registry, Type) {\n    var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    _classCallCheck(this, Compact);\n\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    Object.defineProperty(this, _Type, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _raw, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    _classPrivateFieldLooseBase(this, _Type)[_Type] = typeToConstructor(registry, Type);\n    _classPrivateFieldLooseBase(this, _raw)[_raw] = Compact.decodeCompact(registry, _classPrivateFieldLooseBase(this, _Type)[_Type], value);\n  }\n\n  _createClass(Compact, [{\n    key: \"encodedLength\",\n    get:\n    /**\n     * @description The length of the value when encoded as a Uint8Array\n     */\n    function get() {\n      return this.toU8a().length;\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description Checks if the value is an empty value\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw].isEmpty;\n    }\n    /**\n     * @description Returns the number of bits in the value\n     */\n\n  }, {\n    key: \"bitLength\",\n    value: function bitLength() {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw].bitLength();\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw].eq(other instanceof Compact ? _classPrivateFieldLooseBase(other, _raw)[_raw] : other);\n    }\n    /**\n     * @description Returns a BigInt representation of the number\n     */\n\n  }, {\n    key: \"toBigInt\",\n    value: function toBigInt() {\n      return BigInt(this.toString());\n    }\n    /**\n     * @description Returns the BN representation of the number\n     */\n\n  }, {\n    key: \"toBn\",\n    value: function toBn() {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw].toBn();\n    }\n    /**\n     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex(isLe) {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw].toHex(isLe);\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman(isExtended) {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw].toHuman(isExtended);\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw].toJSON();\n    }\n    /**\n     * @description Returns the number representation for the value\n     */\n\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw].toNumber();\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return \"Compact<\".concat(this.registry.getClassName(_classPrivateFieldLooseBase(this, _Type)[_Type]) || _classPrivateFieldLooseBase(this, _raw)[_raw].toRawType(), \">\");\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw].toString();\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      return compactToU8a(_classPrivateFieldLooseBase(this, _raw)[_raw].toBn());\n    }\n    /**\n     * @description Returns the embedded [[UInt]] or [[Moment]] value\n     */\n\n  }, {\n    key: \"unwrap\",\n    value: function unwrap() {\n      return _classPrivateFieldLooseBase(this, _raw)[_raw];\n    }\n  }], [{\n    key: \"with\",\n    value: function _with(Type) {\n      return /*#__PURE__*/function (_Compact) {\n        _inherits(_class, _Compact);\n\n        var _super = _createSuper(_class);\n\n        function _class(registry, value) {\n          _classCallCheck(this, _class);\n\n          return _super.call(this, registry, Type, value);\n        }\n\n        return _class;\n      }(Compact);\n    }\n    /** @internal */\n\n  }, {\n    key: \"decodeCompact\",\n    value: function decodeCompact(registry, Type, value) {\n      if (value instanceof Compact) {\n        return new Type(registry, _classPrivateFieldLooseBase(value, _raw)[_raw]);\n      } else if (isString(value) || isNumber(value) || isBn(value) || isBigInt(value)) {\n        return new Type(registry, value);\n      }\n\n      var _compactFromU8a = compactFromU8a(value, new Type(registry, 0).bitLength()),\n          _compactFromU8a2 = _slicedToArray(_compactFromU8a, 2),\n          _value = _compactFromU8a2[1];\n\n      return new Type(registry, _value);\n    }\n  }]);\n\n  return Compact;\n}();","map":null,"metadata":{},"sourceType":"module"}