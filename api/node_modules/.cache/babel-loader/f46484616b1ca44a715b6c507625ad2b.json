{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { bnToBn } from \"../bn/toBn.js\";\nimport { isBoolean } from \"../is/boolean.js\";\nimport { isUndefined } from \"../is/undefined.js\";\nimport { formatDecimal } from \"./formatDecimal.js\";\nimport { calcSi, findSi, SI, SI_MID } from \"./si.js\";\nvar DEFAULT_DECIMALS = 0;\nvar DEFAULT_UNIT = SI[SI_MID].text;\nvar defaultDecimals = DEFAULT_DECIMALS;\nvar defaultUnit = DEFAULT_UNIT; // Formats a string/number with <prefix>.<postfix><type> notation\n\nfunction _formatBalance(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var optDecimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultDecimals;\n  var text = bnToBn(input).toString();\n\n  if (text.length === 0 || text === '0') {\n    return '0';\n  } // strip the negative sign so we can work with clean groupings, re-add this in the\n  // end when we return the result (from here on we work with positive numbers)\n\n\n  var isNegative = text[0].startsWith('-');\n\n  if (isNegative) {\n    text = text.substr(1);\n  } // extract options - the boolean case is for backwards-compat\n\n\n  var _ref = isBoolean(options) ? {\n    withSi: options\n  } : options,\n      _ref$decimals = _ref.decimals,\n      decimals = _ref$decimals === void 0 ? optDecimals : _ref$decimals,\n      _ref$forceUnit = _ref.forceUnit,\n      forceUnit = _ref$forceUnit === void 0 ? undefined : _ref$forceUnit,\n      _ref$withSi = _ref.withSi,\n      withSi = _ref$withSi === void 0 ? true : _ref$withSi,\n      _ref$withSiFull = _ref.withSiFull,\n      withSiFull = _ref$withSiFull === void 0 ? false : _ref$withSiFull,\n      _ref$withUnit = _ref.withUnit,\n      withUnit = _ref$withUnit === void 0 ? true : _ref$withUnit; // NOTE We start at midpoint (8) minus 1 - this means that values display as\n  // 123.456 instead of 0.123k (so always 6 relevant). Additionally we use ceil\n  // so there are at most 3 decimal before the decimal separator\n\n\n  var si = calcSi(text, decimals, forceUnit);\n  var mid = text.length - (decimals + si.power);\n  var prefix = text.substr(0, mid);\n  var padding = mid < 0 ? 0 - mid : 0;\n  var postfix = \"\".concat(\"\".concat(new Array(padding + 1).join('0')).concat(text).substr(mid < 0 ? 0 : mid), \"0000\").substr(0, 4);\n  var units = withSi || withSiFull ? si.value === '-' ? withUnit ? \" \".concat(isBoolean(withUnit) ? si.text : withUnit) : '' : \" \".concat(withSiFull ? si.text : si.value).concat(withUnit ? \"\".concat(withSiFull ? ' ' : '').concat(isBoolean(withUnit) ? SI[SI_MID].text : withUnit) : '') : '';\n  return \"\".concat(isNegative ? '-' : '').concat(formatDecimal(prefix || '0'), \".\").concat(postfix).concat(units);\n}\n\nvar formatBalance = _formatBalance; // eslint-disable-next-line @typescript-eslint/unbound-method\n\nformatBalance.calcSi = function (text) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDecimals;\n  return calcSi(text, decimals);\n}; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nformatBalance.findSi = findSi; // eslint-disable-next-line @typescript-eslint/unbound-method\n\nformatBalance.getDefaults = function () {\n  return {\n    decimals: defaultDecimals,\n    unit: defaultUnit\n  };\n}; // get allowable options to display in a dropdown\n// eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nformatBalance.getOptions = function () {\n  var decimals = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultDecimals;\n  return SI.filter(function (_ref2) {\n    var power = _ref2.power;\n    return power < 0 ? decimals + power >= 0 : true;\n  });\n}; // Sets the default decimals to use for formatting (ui-wide)\n// eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nformatBalance.setDefaults = function (_ref3) {\n  var decimals = _ref3.decimals,\n      unit = _ref3.unit;\n  defaultDecimals = isUndefined(decimals) ? defaultDecimals : Array.isArray(decimals) ? decimals[0] : decimals;\n  defaultUnit = isUndefined(unit) ? defaultUnit : Array.isArray(unit) ? unit[0] : unit;\n  SI[SI_MID].text = defaultUnit;\n};\n\nexport { formatBalance };","map":null,"metadata":{},"sourceType":"module"}