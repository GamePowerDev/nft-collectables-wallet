{"ast":null,"code":"import _toArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray\";\nimport _toConsumableArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { assert, isFunction } from '@polkadot/util';\nimport { combineLatest, of } from '@polkadot/x-rxjs';\nimport { map, switchMap } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.js\";\n\nfunction getBalance(api, _ref) {\n  var _ref2 = _slicedToArray(_ref, 4),\n      freeBalance = _ref2[0],\n      reservedBalance = _ref2[1],\n      frozenFee = _ref2[2],\n      frozenMisc = _ref2[3];\n\n  return {\n    freeBalance: freeBalance,\n    frozenFee: frozenFee,\n    frozenMisc: frozenMisc,\n    reservedBalance: reservedBalance,\n    votingBalance: api.registry.createType('Balance', freeBalance.toBn())\n  };\n}\n\nfunction calcBalances(api, _ref3) {\n  var _ref4 = _slicedToArray(_ref3, 2),\n      accountId = _ref4[0],\n      _ref4$ = _slicedToArray(_ref4[1], 2),\n      accountNonce = _ref4$[0],\n      balances = _ref4$[1];\n\n  var primary = balances[0];\n  assert(primary, 'No balances retrieved for account');\n  return _objectSpread({\n    accountId: accountId,\n    accountNonce: accountNonce,\n    additional: balances.filter(function (_, index) {\n      return index !== 0;\n    }).map(function (b) {\n      return getBalance(api, b);\n    })\n  }, getBalance(api, primary));\n} // old\n\n\nfunction queryBalancesFree(api, accountId) {\n  return api.queryMulti([[api.query.balances.freeBalance, accountId], [api.query.balances.reservedBalance, accountId], [api.query.system.accountNonce, accountId]]).pipe(map(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 3),\n        freeBalance = _ref6[0],\n        reservedBalance = _ref6[1],\n        accountNonce = _ref6[2];\n\n    return [accountNonce, [[freeBalance, reservedBalance, api.registry.createType('Balance'), api.registry.createType('Balance')]]];\n  }));\n}\n\nfunction queryBalancesAccount(api, accountId) {\n  var modules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ['balances'];\n  var balances = modules.map(function (m) {\n    var _m;\n\n    return [((_m = api.derive[m]) === null || _m === void 0 ? void 0 : _m.customAccount) || api.query[m].account, accountId];\n  });\n\n  var extract = function extract(data) {\n    return data.map(function (_ref7) {\n      var feeFrozen = _ref7.feeFrozen,\n          free = _ref7.free,\n          miscFrozen = _ref7.miscFrozen,\n          reserved = _ref7.reserved;\n      return [free, reserved, feeFrozen, miscFrozen];\n    });\n  };\n\n  return isFunction(api.query.system.account) ? api.queryMulti([[api.query.system.account, accountId]].concat(_toConsumableArray(balances))).pipe(map(function (_ref8) {\n    var _ref9 = _toArray(_ref8),\n        nonce = _ref9[0].nonce,\n        balances = _ref9.slice(1);\n\n    return [nonce, extract(balances)];\n  })) : api.queryMulti([[api.query.system.accountNonce, accountId]].concat(_toConsumableArray(balances))).pipe(map(function (_ref10) {\n    var _ref11 = _toArray(_ref10),\n        nonce = _ref11[0],\n        balances = _ref11.slice(1);\n\n    return [nonce, extract(balances)];\n  }));\n}\n\nfunction queryCurrent(api, accountId) {\n  // AccountInfo is current, support old, eg. Edgeware\n  return api.query.system.account(accountId).pipe(map(function (infoOrTuple) {\n    var _ref12 = infoOrTuple.nonce ? infoOrTuple.data : infoOrTuple[1],\n        feeFrozen = _ref12.feeFrozen,\n        free = _ref12.free,\n        miscFrozen = _ref12.miscFrozen,\n        reserved = _ref12.reserved;\n\n    return [infoOrTuple.nonce || infoOrTuple[0], [[free, reserved, feeFrozen, miscFrozen]]];\n  }));\n}\n/**\n * @name account\n * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.\n * @returns An object containing the results of various balance queries\n * @example\n * <BR>\n *\n * ```javascript\n * const ALICE = 'F7Hs';\n *\n * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {\n *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\n * });\n * ```\n */\n\n\nexport function account(instanceId, api) {\n  var balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), 'balances');\n  return memo(instanceId, function (address) {\n    return api.derive.accounts.accountId(address).pipe(switchMap(function (accountId) {\n      return accountId ? combineLatest([of(accountId), balanceInstances ? queryBalancesAccount(api, accountId, balanceInstances) : isFunction(api.query.system.account) ? queryCurrent(api, accountId) : isFunction(api.query.balances.account) ? queryBalancesAccount(api, accountId) : queryBalancesFree(api, accountId)]) : of([api.registry.createType('AccountId'), [api.registry.createType('Index'), [[api.registry.createType('Balance'), api.registry.createType('Balance'), api.registry.createType('Balance'), api.registry.createType('Balance')]]]]);\n    }), map(function (result) {\n      return calcBalances(api, result);\n    }));\n  });\n}","map":null,"metadata":{},"sourceType":"module"}