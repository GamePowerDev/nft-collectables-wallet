{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _get from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { assert, isFunction } from '@polkadot/util';\nimport { EMPTY } from '@polkadot/x-rxjs';\nimport { catchError, tap } from '@polkadot/x-rxjs/operators';\nimport { ApiBase } from \"../base/index.js\";\nimport { Combinator } from \"./Combinator.js\"; // extract the arguments and callback params from a value array possibly containing a callback\n\nfunction extractArgs(args, needsCallback) {\n  var callback;\n  var actualArgs = args.slice(); // If the last arg is a function, we pop it, put it into callback.\n  // actualArgs will then hold the actual arguments to be passed to `method`\n\n  if (args.length && isFunction(args[args.length - 1])) {\n    callback = actualArgs.pop();\n  } // When we need a subscription, ensure that a valid callback is actually passed\n\n\n  assert(!needsCallback || isFunction(callback), 'Expected a callback to be passed with subscriptions');\n  return [actualArgs, callback];\n} // a Promise completion tracker, wrapping an isComplete variable that ensures the promise only resolves once\n\n\nfunction promiseTracker(_resolve, _reject) {\n  var isCompleted = false;\n  return {\n    reject: function reject(error) {\n      if (!isCompleted) {\n        isCompleted = true;\n\n        _reject(error);\n      }\n\n      return EMPTY;\n    },\n    resolve: function resolve(value) {\n      if (!isCompleted) {\n        isCompleted = true;\n\n        _resolve(value);\n      }\n    }\n  };\n} // Decorate a call for a single-shot result - retrieve and then immediate unsubscribe\n\n\nfunction decorateCall(method, actualArgs) {\n  return new Promise(function (resolve, reject) {\n    // single result tracker - either reject with Error or resolve with Codec result\n    var tracker = promiseTracker(resolve, reject); // encoding errors reject immediately, any result unsubscribes and resolves\n\n    var subscription = method.apply(void 0, _toConsumableArray(actualArgs)).pipe(catchError(function (error) {\n      return tracker.reject(error);\n    })).subscribe(function (result) {\n      tracker.resolve(result);\n      setTimeout(function () {\n        return subscription.unsubscribe();\n      }, 0);\n    });\n  });\n} // Decorate a subscription where we have a result callback specified\n\n\nfunction decorateSubscribe(method, actualArgs, resultCb) {\n  return new Promise(function (resolve, reject) {\n    // either reject with error or resolve with unsubscribe callback\n    var tracker = promiseTracker(resolve, reject); // errors reject immediately, the first result resolves with an unsubscribe promise, all results via callback\n\n    var subscription = method.apply(void 0, _toConsumableArray(actualArgs)).pipe(catchError(function (error) {\n      return tracker.reject(error);\n    }), tap(function () {\n      return tracker.resolve(function () {\n        return subscription.unsubscribe();\n      });\n    })).subscribe(function (result) {\n      // queue result (back of queue to clear current)\n      setTimeout(function () {\n        return resultCb(result);\n      }, 0);\n    });\n  });\n}\n/**\n * @description Decorate method for ApiPromise, where the results are converted to the Promise equivalent\n */\n\n\nexport function decorateMethod(method, options) {\n  var needsCallback = options && options.methodName && options.methodName.includes('subscribe');\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var _extractArgs = extractArgs(args, !!needsCallback),\n        _extractArgs2 = _slicedToArray(_extractArgs, 2),\n        actualArgs = _extractArgs2[0],\n        resultCb = _extractArgs2[1];\n\n    return resultCb ? decorateSubscribe(method, actualArgs, resultCb) : decorateCall((options === null || options === void 0 ? void 0 : options.overrideNoSub) || method, actualArgs);\n  };\n}\n/**\n * # @polkadot/api/promise\n *\n * ## Overview\n *\n * @name ApiPromise\n * @description\n * ApiPromise is a standard JavaScript wrapper around the RPC and interfaces on the Polkadot network. As a full Promise-based, all interface calls return Promises, including the static `.create(...)`. Subscription calls utilise `(value) => {}` callbacks to pass through the latest values.\n *\n * The API is well suited to real-time applications where either the single-shot state is needed or use is to be made of the subscription-based features of Polkadot (and Substrate) clients.\n *\n * @see [[ApiRx]]\n *\n * ## Usage\n *\n * Making rpc calls -\n * <BR>\n *\n * ```javascript\n * import ApiPromise from '@polkadot/api/promise';\n *\n * // initialise via static create\n * const api = await ApiPromise.create();\n *\n * // make a subscription to the network head\n * api.rpc.chain.subscribeNewHeads((header) => {\n *   console.log(`Chain is at #${header.number}`);\n * });\n * ```\n * <BR>\n *\n * Subscribing to chain state -\n * <BR>\n *\n * ```javascript\n * import { ApiPromise, WsProvider } from '@polkadot/api';\n *\n * // initialise a provider with a specific endpoint\n * const provider = new WsProvider('wss://example.com:9944')\n *\n * // initialise via isReady & new with specific provider\n * const api = await new ApiPromise({ provider }).isReady;\n *\n * // retrieve the block target time\n * const blockPeriod = await api.query.timestamp.blockPeriod().toNumber();\n * let last = 0;\n *\n * // subscribe to the current block timestamp, updates automatically (callback provided)\n * api.query.timestamp.now((timestamp) => {\n *   const elapsed = last\n *     ? `, ${timestamp.toNumber() - last}s since last`\n *     : '';\n *\n *   last = timestamp.toNumber();\n *   console.log(`timestamp ${timestamp}${elapsed} (${blockPeriod}s target)`);\n * });\n * ```\n * <BR>\n *\n * Submitting a transaction -\n * <BR>\n *\n * ```javascript\n * import ApiPromise from '@polkadot/api/promise';\n *\n * ApiPromise.create().then((api) => {\n *   const [nonce] = await api.query.system.account(keyring.alice.address);\n *\n *   api.tx.balances\n *     // create transfer\n *     transfer(keyring.bob.address, 12345)\n *     // sign the transcation\n *     .sign(keyring.alice, { nonce })\n *     // send the transaction (optional status callback)\n *     .send((status) => {\n *       console.log(`current status ${status.type}`);\n *     })\n *     // retrieve the submitted extrinsic hash\n *     .then((hash) => {\n *       console.log(`submitted with hash ${hash}`);\n *     });\n * });\n * ```\n */\n\nvar _isReadyPromise = _classPrivateFieldLooseKey(\"isReadyPromise\");\n\nvar _isReadyOrErrorPromise = _classPrivateFieldLooseKey(\"isReadyOrErrorPromise\");\n\nexport var ApiPromise = /*#__PURE__*/function (_ApiBase) {\n  _inherits(ApiPromise, _ApiBase);\n\n  var _super = _createSuper(ApiPromise);\n\n  /**\n   * @description Creates an instance of the ApiPromise class\n   * @param options Options to create an instance. This can be either [[ApiOptions]] or\n   * an [[WsProvider]].\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * import Api from '@polkadot/api/promise';\n   *\n   * new Api().isReady.then((api) => {\n   *   api.rpc.subscribeNewHeads((header) => {\n   *     console.log(`new block #${header.number.toNumber()}`);\n   *   });\n   * });\n   * ```\n   */\n  function ApiPromise(options) {\n    var _thisSuper, _thisSuper2, _thisSuper3, _this;\n\n    _classCallCheck(this, ApiPromise);\n\n    _this = _super.call(this, options, 'promise', decorateMethod);\n    Object.defineProperty(_assertThisInitialized(_this), _isReadyPromise, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_assertThisInitialized(_this), _isReadyOrErrorPromise, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _isReadyPromise)[_isReadyPromise] = new Promise(function (resolve) {\n      _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(ApiPromise.prototype)), \"once\", _thisSuper).call(_thisSuper, 'ready', function () {\n        return resolve(_assertThisInitialized(_this));\n      });\n    });\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _isReadyOrErrorPromise)[_isReadyOrErrorPromise] = new Promise(function (resolve, reject) {\n      var tracker = promiseTracker(resolve, reject);\n\n      _get((_thisSuper2 = _assertThisInitialized(_this), _getPrototypeOf(ApiPromise.prototype)), \"once\", _thisSuper2).call(_thisSuper2, 'ready', function () {\n        return tracker.resolve(_assertThisInitialized(_this));\n      });\n\n      _get((_thisSuper3 = _assertThisInitialized(_this), _getPrototypeOf(ApiPromise.prototype)), \"once\", _thisSuper3).call(_thisSuper3, 'error', function (e) {\n        return tracker.reject(e);\n      });\n    });\n    return _this;\n  }\n  /**\n   * @description Promise that resolves the first time we are connected and loaded\n   */\n\n\n  _createClass(ApiPromise, [{\n    key: \"isReady\",\n    get: function get() {\n      return _classPrivateFieldLooseBase(this, _isReadyPromise)[_isReadyPromise];\n    }\n    /**\n     * @description Promise that resolves if we can connect, or reject if there is an error\n     */\n\n  }, {\n    key: \"isReadyOrError\",\n    get: function get() {\n      return _classPrivateFieldLooseBase(this, _isReadyOrErrorPromise)[_isReadyOrErrorPromise];\n    }\n    /**\n     * @description Returns a clone of this ApiPromise instance (new underlying provider connection)\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new ApiPromise(_objectSpread(_objectSpread({}, this._options), {}, {\n        source: this\n      }));\n    }\n    /**\n     * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions\n     * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`\n     * @param callback A callback that will return an Array of all the values this combinator has been applied to\n     * @example\n     * <BR>\n     *\n     * ```javascript\n     * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';\n     *\n     * // combines values from balance & nonce as it updates\n     * api.combineLatest([\n     *   api.rpc.chain.subscribeNewHeads,\n     *   (cb) => api.query.system.account(address, cb)\n     * ], ([head, [balance, nonce]]) => {\n     *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);\n     * });\n     * ```\n     */\n    // eslint-disable-next-line @typescript-eslint/require-await\n\n  }, {\n    key: \"combineLatest\",\n    value: function () {\n      var _combineLatest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fns, callback) {\n        var combinator;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                combinator = new Combinator(fns, callback);\n                return _context.abrupt(\"return\", function () {\n                  combinator.unsubscribe();\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function combineLatest(_x, _x2) {\n        return _combineLatest.apply(this, arguments);\n      }\n\n      return combineLatest;\n    }()\n  }], [{\n    key: \"create\",\n    value:\n    /**\n     * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.\n     * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a\n     * provider (see the constructor arguments)\n     * @example\n     * <BR>\n     *\n     * ```javascript\n     * import Api from '@polkadot/api/promise';\n     *\n     * Api.create().then(async (api) => {\n     *   const timestamp = await api.query.timestamp.now();\n     *\n     *   console.log(`lastest block timestamp ${timestamp}`);\n     * });\n     * ```\n     */\n    function create(options) {\n      var instance = new ApiPromise(options);\n\n      if (options && options.throwOnConnect) {\n        return instance.isReadyOrError;\n      } // Swallow any rejections on isReadyOrError\n      // (in Node 15.x this creates issues, when not being looked at)\n\n\n      instance.isReadyOrError.catch(function () {// ignore\n      });\n      return instance.isReady;\n    }\n  }]);\n\n  return ApiPromise;\n}(ApiBase);","map":null,"metadata":{},"sourceType":"module"}