{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name promisify\n * @summary Wraps an async callback into a `Promise`\n * @description\n * Wraps the supplied async function `fn` that has a standard JS callback `(error: Error, result: any)` into a `Promise`, passing the supplied parameters. When `error` is set, the Promise is rejected, else the Promise resolves with the `result` value.\n * @example\n * <BR>\n *\n * ```javascript\n * const { promisify } from '@polkadot/util';\n *\n * await promisify(null, ((a, cb) => cb(null, a), true); // resolves with `true`\n * await promisify(null, (cb) => cb(new Error('error!'))); // rejects with `error!`\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function promisify(self, fn) {\n  for (var _len = arguments.length, params = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    params[_key - 2] = arguments[_key];\n  }\n\n  return new Promise(function (resolve, reject) {\n    var handler = function handler(error, result) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    };\n\n    fn.apply(self, params.concat(handler));\n  });\n}","map":null,"metadata":{},"sourceType":"module"}