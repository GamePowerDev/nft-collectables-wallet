{"ast":null,"code":"import _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest } from '@polkadot/x-rxjs';\nimport { map } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.js\"; // Voter is current tuple is 2.x-era\n\nfunction isVoter(value) {\n  return !Array.isArray(value);\n}\n\nfunction retrieveStakeOf(api) {\n  return (api.query.electionsPhragmen || api.query.elections).stakeOf.entries().pipe(map(function (entries) {\n    return entries.map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          _ref2$0$args = _slicedToArray(_ref2[0].args, 1),\n          accountId = _ref2$0$args[0],\n          stake = _ref2[1];\n\n      return [accountId, stake];\n    });\n  }));\n}\n\nfunction retrieveVoteOf(api) {\n  return (api.query.electionsPhragmen || api.query.elections).votesOf.entries().pipe(map(function (entries) {\n    return entries.map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          _ref4$0$args = _slicedToArray(_ref4[0].args, 1),\n          accountId = _ref4$0$args[0],\n          votes = _ref4[1];\n\n      return [accountId, votes];\n    });\n  }));\n}\n\nfunction retrievePrev(api) {\n  return combineLatest([retrieveStakeOf(api), retrieveVoteOf(api)]).pipe(map(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n        stakes = _ref6[0],\n        votes = _ref6[1];\n\n    var result = [];\n    votes.forEach(function (_ref7) {\n      var _ref8 = _slicedToArray(_ref7, 2),\n          voter = _ref8[0],\n          votes = _ref8[1];\n\n      result.push([voter, {\n        stake: api.registry.createType('Balance'),\n        votes: votes\n      }]);\n    });\n    stakes.forEach(function (_ref9) {\n      var _ref10 = _slicedToArray(_ref9, 2),\n          staker = _ref10[0],\n          stake = _ref10[1];\n\n      var entry = result.find(function (_ref11) {\n        var _ref12 = _slicedToArray(_ref11, 1),\n            voter = _ref12[0];\n\n        return voter.eq(staker);\n      });\n\n      if (entry) {\n        entry[1].stake = stake;\n      } else {\n        result.push([staker, {\n          stake: stake,\n          votes: []\n        }]);\n      }\n    });\n    return result;\n  }));\n}\n\nfunction retrieveCurrent(api) {\n  var elections = api.query.electionsPhragmen || api.query.elections;\n  return elections.voting.entries().pipe(map(function (entries) {\n    return entries.map(function (_ref13) {\n      var _ref14 = _slicedToArray(_ref13, 2),\n          _ref14$0$args = _slicedToArray(_ref14[0].args, 1),\n          accountId = _ref14$0$args[0],\n          value = _ref14[1];\n\n      return [accountId, isVoter(value) ? {\n        stake: value.stake,\n        votes: value.votes\n      } : {\n        stake: value[0],\n        votes: value[1]\n      }];\n    });\n  }));\n}\n\nexport function votes(instanceId, api) {\n  return memo(instanceId, function () {\n    return (api.query.electionsPhragmen || api.query.elections).stakeOf ? retrievePrev(api) : retrieveCurrent(api);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}