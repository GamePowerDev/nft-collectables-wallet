{"ast":null,"code":"import _get from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { Struct } from \"../codec/Struct.js\";\nimport { Tuple } from \"../codec/Tuple.js\";\nimport { Null } from \"../primitive/Null.js\";\n/**\n * @name GenericEventData\n * @description\n * Wrapper for the actual data that forms part of an [[Event]]\n */\n\nvar _meta = _classPrivateFieldLooseKey(\"meta\");\n\nvar _method = _classPrivateFieldLooseKey(\"method\");\n\nvar _section = _classPrivateFieldLooseKey(\"section\");\n\nvar _typeDef = _classPrivateFieldLooseKey(\"typeDef\");\n\nexport var GenericEventData = /*#__PURE__*/function (_Tuple) {\n  _inherits(GenericEventData, _Tuple);\n\n  var _super = _createSuper(GenericEventData);\n\n  function GenericEventData(registry, value) {\n    var _this;\n\n    var Types = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var typeDef = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    var meta = arguments.length > 4 ? arguments[4] : undefined;\n    var section = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '<unknown>';\n    var method = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '<unknown>';\n\n    _classCallCheck(this, GenericEventData);\n\n    _this = _super.call(this, registry, Types, value);\n    Object.defineProperty(_assertThisInitialized(_this), _meta, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_assertThisInitialized(_this), _method, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_assertThisInitialized(_this), _section, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_assertThisInitialized(_this), _typeDef, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _meta)[_meta] = meta;\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _method)[_method] = method;\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _section)[_section] = section;\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _typeDef)[_typeDef] = typeDef;\n    return _this;\n  }\n  /**\n   * @description The wrapped [[EventMetadata]]\n   */\n\n\n  _createClass(GenericEventData, [{\n    key: \"meta\",\n    get: function get() {\n      return _classPrivateFieldLooseBase(this, _meta)[_meta];\n    }\n    /**\n     * @description The method as a string\n     */\n\n  }, {\n    key: \"method\",\n    get: function get() {\n      return _classPrivateFieldLooseBase(this, _method)[_method];\n    }\n    /**\n     * @description The section as a string\n     */\n\n  }, {\n    key: \"section\",\n    get: function get() {\n      return _classPrivateFieldLooseBase(this, _section)[_section];\n    }\n    /**\n     * @description The [[TypeDef]] for this event\n     */\n\n  }, {\n    key: \"typeDef\",\n    get: function get() {\n      return _classPrivateFieldLooseBase(this, _typeDef)[_typeDef];\n    }\n  }]);\n\n  return GenericEventData;\n}(Tuple);\n/**\n * @name GenericEvent\n * @description\n * A representation of a system event. These are generated via the [[Metadata]] interfaces and\n * specific to a specific Substrate runtime\n */\n\nexport var GenericEvent = /*#__PURE__*/function (_Struct) {\n  _inherits(GenericEvent, _Struct);\n\n  var _super2 = _createSuper(GenericEvent);\n\n  // Currently we _only_ decode from Uint8Array, since we expect it to\n  // be used via EventRecord\n  function GenericEvent(registry, _value) {\n    _classCallCheck(this, GenericEvent);\n\n    var _GenericEvent$decodeE = GenericEvent.decodeEvent(registry, _value),\n        DataType = _GenericEvent$decodeE.DataType,\n        value = _GenericEvent$decodeE.value;\n\n    return _super2.call(this, registry, {\n      index: 'EventId',\n      // eslint-disable-next-line sort-keys\n      data: DataType\n    }, value);\n  }\n  /** @internal */\n\n\n  _createClass(GenericEvent, [{\n    key: \"data\",\n    get:\n    /**\n     * @description The wrapped [[EventData]]\n     */\n    function get() {\n      return this.get('data');\n    }\n    /**\n     * @description The [[EventId]], identifying the raw event\n     */\n\n  }, {\n    key: \"index\",\n    get: function get() {\n      return this.get('index');\n    }\n    /**\n     * @description The [[EventMetadata]] with the documentation\n     */\n\n  }, {\n    key: \"meta\",\n    get: function get() {\n      return this.data.meta;\n    }\n    /**\n     * @description The method string identifying the event\n     */\n\n  }, {\n    key: \"method\",\n    get: function get() {\n      return this.data.method;\n    }\n    /**\n     * @description The section string identifying the event\n     */\n\n  }, {\n    key: \"section\",\n    get: function get() {\n      return this.data.section;\n    }\n    /**\n     * @description The [[TypeDef]] for the event\n     */\n\n  }, {\n    key: \"typeDef\",\n    get: function get() {\n      return this.data.typeDef;\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman(isExpanded) {\n      return _objectSpread(_objectSpread({\n        method: this.method,\n        section: this.section\n      }, isExpanded ? {\n        documentation: this.meta.documentation.map(function (d) {\n          return d.toString();\n        })\n      } : {}), _get(_getPrototypeOf(GenericEvent.prototype), \"toHuman\", this).call(this, isExpanded));\n    }\n  }], [{\n    key: \"decodeEvent\",\n    value: function decodeEvent(registry) {\n      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint8Array();\n\n      if (!value.length) {\n        return {\n          DataType: Null\n        };\n      }\n\n      var index = value.subarray(0, 2);\n      return {\n        DataType: registry.findMetaEvent(index),\n        value: {\n          data: value.subarray(2),\n          index: index\n        }\n      };\n    }\n  }]);\n\n  return GenericEvent;\n}(Struct);","map":null,"metadata":{},"sourceType":"module"}