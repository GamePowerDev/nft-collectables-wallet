{"ast":null,"code":"import _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/rpc-provider authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { assert, isNumber, isString, isUndefined } from '@polkadot/util';\n\nfunction formatErrorData(data) {\n  if (isUndefined(data)) {\n    return '';\n  }\n\n  var formatted = \": \".concat(isString(data) ? data.replace(/Error\\(\"/g, '').replace(/\\(\"/g, '(').replace(/\"\\)/g, ')').replace(/\\(/g, ', ').replace(/\\)/g, '') : JSON.stringify(data)); // We need some sort of cut-off here since these can be very large and\n  // very nested, pick a number and trim the result display to it\n\n  return formatted.length <= 256 ? formatted : \"\".concat(formatted.substr(0, 255), \"\\u2026\");\n}\n/** @internal */\n\n\nvar _id = _classPrivateFieldLooseKey(\"id\");\n\nexport var RpcCoder = /*#__PURE__*/function () {\n  function RpcCoder() {\n    _classCallCheck(this, RpcCoder);\n\n    Object.defineProperty(this, _id, {\n      writable: true,\n      value: 0\n    });\n  }\n\n  _createClass(RpcCoder, [{\n    key: \"decodeResponse\",\n    value: function decodeResponse(response) {\n      assert(response, 'Empty response object received');\n      assert(response.jsonrpc === '2.0', 'Invalid jsonrpc field in decoded object');\n      var isSubscription = !isUndefined(response.params) && !isUndefined(response.method);\n      assert(isNumber(response.id) || isSubscription && (isNumber(response.params.subscription) || isString(response.params.subscription)), 'Invalid id field in decoded object');\n\n      this._checkError(response.error);\n\n      assert(!isUndefined(response.result) || isSubscription, 'No result found in JsonRpc response');\n\n      if (isSubscription) {\n        this._checkError(response.params.error);\n\n        return response.params.result;\n      }\n\n      return response.result;\n    }\n  }, {\n    key: \"encodeJson\",\n    value: function encodeJson(method, params) {\n      return JSON.stringify(this.encodeObject(method, params));\n    }\n  }, {\n    key: \"encodeObject\",\n    value: function encodeObject(method, params) {\n      return {\n        id: ++_classPrivateFieldLooseBase(this, _id)[_id],\n        jsonrpc: '2.0',\n        method: method,\n        params: params\n      };\n    }\n  }, {\n    key: \"getId\",\n    value: function getId() {\n      return _classPrivateFieldLooseBase(this, _id)[_id];\n    }\n  }, {\n    key: \"_checkError\",\n    value: function _checkError(error) {\n      if (error) {\n        var code = error.code,\n            data = error.data,\n            message = error.message;\n        throw new Error(\"\".concat(code, \": \").concat(message).concat(formatErrorData(data)));\n      }\n    }\n  }]);\n\n  return RpcCoder;\n}();","map":null,"metadata":{},"sourceType":"module"}