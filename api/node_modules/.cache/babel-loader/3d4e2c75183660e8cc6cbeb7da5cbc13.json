{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// Original implementation: https://github.com/paritytech/polka-ui/blob/4858c094684769080f5811f32b081dd7780b0880/src/polkadot.js#L34\nimport { assert, u8aConcat } from '@polkadot/util';\nimport { base58Encode } from \"../base58/encode.js\";\nimport { decodeAddress } from \"./decode.js\";\nimport { defaults } from \"./defaults.js\";\nimport { sshash } from \"./sshash.js\";\nexport function encodeAddress(_key) {\n  var ss58Format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaults.prefix;\n  // decode it, this means we can re-encode an address\n  var key = decodeAddress(_key);\n  assert(ss58Format >= 0 && ss58Format <= 16383 && ![46, 47].includes(ss58Format), 'Out of range ss58Format specified');\n  assert(defaults.allowedDecodedLengths.includes(key.length), \"Expected a valid key to convert, with length \".concat(defaults.allowedDecodedLengths.join(', ')));\n  var isPublicKey = [32, 33].includes(key.length);\n  var input = u8aConcat(new Uint8Array(ss58Format < 64 ? [ss58Format] : [(ss58Format & 252) >> 2 | 64, ss58Format >> 8 | (ss58Format & 3) << 6]), key);\n  return base58Encode(u8aConcat(input, sshash(input).subarray(0, isPublicKey ? 2 : 1)));\n}","map":null,"metadata":{},"sourceType":"module"}