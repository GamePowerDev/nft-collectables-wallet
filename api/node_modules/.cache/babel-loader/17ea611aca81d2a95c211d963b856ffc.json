{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, u8aToBn } from '@polkadot/util';\nimport { DEFAULT_PARAMS } from \"./defaults.js\";\nexport function scryptFromU8a(data) {\n  var salt = data.subarray(0, 32);\n  var N = u8aToBn(data.subarray(32 + 0, 32 + 4), {\n    isLe: true\n  }).toNumber();\n  var p = u8aToBn(data.subarray(32 + 4, 32 + 8), {\n    isLe: true\n  }).toNumber();\n  var r = u8aToBn(data.subarray(32 + 8, 32 + 12), {\n    isLe: true\n  }).toNumber(); // FIXME At this moment we assume these to be fixed params, this is not a great idea since we lose flexibility\n  // and updates for greater security. However we need some protection against carefully-crafted params that can\n  // eat up CPU since these are user inputs. So we need to get very clever here, but atm we only allow the defaults\n  // and if no match, bail out\n\n  assert(N === DEFAULT_PARAMS.N && p === DEFAULT_PARAMS.p && r === DEFAULT_PARAMS.r, 'Invalid injected scrypt params found');\n  return {\n    params: {\n      N: N,\n      p: p,\n      r: r\n    },\n    salt: salt\n  };\n}","map":null,"metadata":{},"sourceType":"module"}