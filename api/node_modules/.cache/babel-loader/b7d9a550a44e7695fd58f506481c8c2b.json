{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport BN from 'bn.js';\nimport { assert } from \"../assert.js\";\nimport { bnToBn, bnToU8a } from \"../bn/index.js\";\nimport { u8aConcat } from \"../u8a/index.js\";\nvar MAX_U8 = new BN(2).pow(new BN(8 - 2)).subn(1);\nvar MAX_U16 = new BN(2).pow(new BN(16 - 2)).subn(1);\nvar MAX_U32 = new BN(2).pow(new BN(32 - 2)).subn(1);\n/**\n * @name compactToU8a\n * @description Encodes a number into a compact representation\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactToU8a } from '@polkadot/util';\n *\n * console.log(compactToU8a(511, 32)); // Uint8Array([0b11111101, 0b00000111])\n * ```\n */\n\nexport function compactToU8a(_value) {\n  var value = bnToBn(_value);\n\n  if (value.lte(MAX_U8)) {\n    return new Uint8Array([value.toNumber() << 2]);\n  } else if (value.lte(MAX_U16)) {\n    return bnToU8a(value.shln(2).addn(1), 16, true);\n  } else if (value.lte(MAX_U32)) {\n    return bnToU8a(value.shln(2).addn(2), 32, true);\n  }\n\n  var u8a = bnToU8a(value);\n  var length = u8a.length; // adjust to the minimum number of bytes\n\n  while (u8a[length - 1] === 0) {\n    length--;\n  }\n\n  assert(length >= 4, 'Previous tests match anyting less than 2^30; qed');\n  return u8aConcat(new Uint8Array([// substract 4 as minimum (also catered for in decoding)\n  (length - 4 << 2) + 3]), u8a.subarray(0, length));\n}","map":null,"metadata":{},"sourceType":"module"}