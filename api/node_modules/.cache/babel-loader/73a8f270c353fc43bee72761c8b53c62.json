{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport nacl from 'tweetnacl';\nimport { assert, u8aToU8a } from '@polkadot/util';\nimport { ed25519Verify, isReady } from '@polkadot/wasm-crypto';\n/**\n * @name naclSign\n * @summary Verifies the signature on the supplied message.\n * @description\n * Verifies the `signature` on `message` with the supplied `publicKey`. Returns `true` on sucess, `false` otherwise.\n * @example\n * <BR>\n *\n * ```javascript\n * import { naclVerify } from '@polkadot/util-crypto';\n *\n * naclVerify([...], [...], [...]); // => true/false\n * ```\n */\n\nexport function naclVerify(message, signature, publicKey) {\n  var onlyJs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var messageU8a = u8aToU8a(message);\n  var publicKeyU8a = u8aToU8a(publicKey);\n  var signatureU8a = u8aToU8a(signature);\n  assert(publicKeyU8a.length === 32, \"Invalid publicKey, received \".concat(publicKeyU8a.length, \", expected 32\"));\n  assert(signatureU8a.length === 64, \"Invalid signature, received \".concat(signatureU8a.length, \" bytes, expected 64\"));\n  return isReady() && !onlyJs ? ed25519Verify(signatureU8a, messageU8a, publicKeyU8a) : nacl.sign.detached.verify(messageU8a, signatureU8a, publicKeyU8a);\n}","map":null,"metadata":{},"sourceType":"module"}