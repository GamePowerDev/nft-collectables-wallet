{"ast":null,"code":"import _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport BN from 'bn.js';\nimport { BN_ZERO } from '@polkadot/util';\nimport { combineLatest } from '@polkadot/x-rxjs';\nimport { map, switchMap } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.js\";\nvar QUERY_OPTS = {\n  withDestination: true,\n  withLedger: true,\n  withNominations: true,\n  withPrefs: true\n};\n\nfunction groupByEra(list) {\n  return list.reduce(function (map, _ref) {\n    var era = _ref.era,\n        value = _ref.value;\n    var key = era.toString();\n    map[key] = (map[key] || BN_ZERO).add(value.unwrap());\n    return map;\n  }, {});\n}\n\nfunction calculateUnlocking(api, stakingLedger, sessionInfo) {\n  var results = Object.entries(groupByEra(((stakingLedger === null || stakingLedger === void 0 ? void 0 : stakingLedger.unlocking) || []).filter(function (_ref2) {\n    var era = _ref2.era;\n    return era.unwrap().gt(sessionInfo.activeEra);\n  }))).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        eraString = _ref4[0],\n        value = _ref4[1];\n\n    return {\n      remainingEras: new BN(eraString).isub(sessionInfo.activeEra),\n      value: api.registry.createType('Balance', value)\n    };\n  });\n  return results.length ? results : undefined;\n}\n\nfunction redeemableSum(api, stakingLedger, sessionInfo) {\n  return api.registry.createType('Balance', ((stakingLedger === null || stakingLedger === void 0 ? void 0 : stakingLedger.unlocking) || []).reduce(function (total, _ref5) {\n    var era = _ref5.era,\n        value = _ref5.value;\n    return sessionInfo.activeEra.gte(era.unwrap()) ? total.iadd(value.unwrap()) : total;\n  }, new BN(0)));\n}\n\nfunction parseResult(api, sessionInfo, keys, query) {\n  return _objectSpread(_objectSpread(_objectSpread({}, keys), query), {}, {\n    redeemable: redeemableSum(api, query.stakingLedger, sessionInfo),\n    unlocking: calculateUnlocking(api, query.stakingLedger, sessionInfo)\n  });\n}\n/**\n * @description From a list of stashes, fill in all the relevant staking details\n */\n\n\nexport function accounts(instanceId, api) {\n  return memo(instanceId, function (accountIds) {\n    return api.derive.session.info().pipe(switchMap(function (sessionInfo) {\n      return combineLatest([api.derive.staking.keysMulti(accountIds), api.derive.staking.queryMulti(accountIds, QUERY_OPTS)]).pipe(map(function (_ref6) {\n        var _ref7 = _slicedToArray(_ref6, 2),\n            keys = _ref7[0],\n            queries = _ref7[1];\n\n        return queries.map(function (query, index) {\n          return parseResult(api, sessionInfo, keys[index], query);\n        });\n      }));\n    }));\n  });\n}\n/**\n * @description From a stash, retrieve the controllerId and fill in all the relevant staking details\n */\n\nexport function account(instanceId, api) {\n  return memo(instanceId, function (accountId) {\n    return api.derive.staking.accounts([accountId]).pipe(map(function (_ref8) {\n      var _ref9 = _slicedToArray(_ref8, 1),\n          first = _ref9[0];\n\n      return first;\n    }));\n  });\n}","map":null,"metadata":{},"sourceType":"module"}