{"ast":null,"code":"import _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, of } from '@polkadot/x-rxjs';\nimport { map, switchMap } from '@polkadot/x-rxjs/operators';\nimport { deriveCache, memo } from \"../util/index.js\";\nvar CACHE_KEY = 'eraSlashes';\n\nfunction mapSlashes(era, noms, vals) {\n  var nominators = {};\n  var validators = {};\n  noms.forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        optBalance = _ref2[1];\n\n    nominators[key.args[1].toString()] = optBalance.unwrap();\n  });\n  vals.forEach(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        key = _ref4[0],\n        optRes = _ref4[1];\n\n    validators[key.args[1].toString()] = optRes.unwrapOrDefault()[1];\n  });\n  return {\n    era: era,\n    nominators: nominators,\n    validators: validators\n  };\n}\n\nexport function _eraSlashes(instanceId, api) {\n  return memo(instanceId, function (era, withActive) {\n    var cacheKey = \"\".concat(CACHE_KEY, \"-\").concat(era.toString());\n    var cached = withActive ? undefined : deriveCache.get(cacheKey);\n    return cached ? of(cached) : combineLatest([api.query.staking.nominatorSlashInEra.entries(era), api.query.staking.validatorSlashInEra.entries(era)]).pipe(map(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n          noms = _ref6[0],\n          vals = _ref6[1];\n\n      var value = mapSlashes(era, noms, vals);\n      !withActive && deriveCache.set(cacheKey, value);\n      return value;\n    }));\n  });\n}\nexport function eraSlashes(instanceId, api) {\n  return memo(instanceId, function (era) {\n    return api.derive.staking._eraSlashes(era, true);\n  });\n}\nexport function _erasSlashes(instanceId, api) {\n  return memo(instanceId, function (eras, withActive) {\n    return eras.length ? combineLatest(eras.map(function (era) {\n      return api.derive.staking._eraSlashes(era, withActive);\n    })) : of([]);\n  });\n}\nexport function erasSlashes(instanceId, api) {\n  return memo(instanceId, function () {\n    var withActive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return api.derive.staking.erasHistoric(withActive).pipe(switchMap(function (eras) {\n      return api.derive.staking._erasSlashes(eras, withActive);\n    }));\n  });\n}","map":null,"metadata":{},"sourceType":"module"}