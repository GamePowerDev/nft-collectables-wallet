{"ast":null,"code":"import _get from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractInt } from \"./AbstractInt.js\";\n/**\n * @name Int\n * @description\n * A generic signed integer codec. For Substrate all numbers are Little Endian encoded,\n * this handles the encoding and decoding of those numbers. Upon construction\n * the bitLength is provided and any additional use keeps the number to this\n * length. This extends `BN`, so all methods available on a normal `BN` object\n * is available here.\n * @noInheritDoc\n */\n\nexport var Int = /*#__PURE__*/function (_AbstractInt) {\n  _inherits(Int, _AbstractInt);\n\n  var _super = _createSuper(Int);\n\n  function Int(registry) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var bitLength = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, Int);\n\n    return _super.call(this, registry, value, bitLength, true);\n  }\n\n  _createClass(Int, null, [{\n    key: \"with\",\n    value: function _with(bitLength, typeName) {\n      return /*#__PURE__*/function (_Int) {\n        _inherits(_class, _Int);\n\n        var _super2 = _createSuper(_class);\n\n        function _class(registry, value) {\n          _classCallCheck(this, _class);\n\n          return _super2.call(this, registry, value, bitLength);\n        }\n\n        _createClass(_class, [{\n          key: \"toRawType\",\n          value: function toRawType() {\n            return typeName || _get(_getPrototypeOf(_class.prototype), \"toRawType\", this).call(this);\n          }\n        }]);\n\n        return _class;\n      }(Int);\n    }\n  }]);\n\n  return Int;\n}(AbstractInt);","map":null,"metadata":{},"sourceType":"module"}