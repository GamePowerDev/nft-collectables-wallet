{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport \"./detectPackage.js\";\nimport * as accounts from \"./accounts/index.js\";\nimport * as balances from \"./balances/index.js\";\nimport * as bounties from \"./bounties/index.js\";\nimport * as chain from \"./chain/index.js\";\nimport * as contracts from \"./contracts/index.js\";\nimport * as council from \"./council/index.js\";\nimport * as democracy from \"./democracy/index.js\";\nimport * as elections from \"./elections/index.js\";\nimport * as imOnline from \"./imOnline/index.js\";\nimport * as parachains from \"./parachains/index.js\";\nimport * as session from \"./session/index.js\";\nimport * as society from \"./society/index.js\";\nimport * as staking from \"./staking/index.js\";\nimport * as technicalCommittee from \"./technicalCommittee/index.js\";\nimport * as treasury from \"./treasury/index.js\";\nimport * as tx from \"./tx/index.js\";\nexport { packageInfo } from \"./packageInfo.js\";\nexport * from \"./type/index.js\";\nexport var derive = {\n  accounts: accounts,\n  balances: balances,\n  bounties: bounties,\n  chain: chain,\n  contracts: contracts,\n  council: council,\n  democracy: democracy,\n  elections: elections,\n  imOnline: imOnline,\n  parachains: parachains,\n  session: session,\n  society: society,\n  staking: staking,\n  technicalCommittee: technicalCommittee,\n  treasury: treasury,\n  tx: tx\n}; // Enable derive only if some of these modules are available\n\nvar deriveAvail = {\n  contracts: ['contracts'],\n  council: ['council'],\n  democracy: ['democracy'],\n  elections: ['electionsPhragmen', 'elections'],\n  imOnline: ['imOnline'],\n  parachains: ['parachains', 'registrar'],\n  session: ['session'],\n  society: ['society'],\n  staking: ['staking'],\n  technicalCommittee: ['technicalCommittee'],\n  treasury: ['treasury']\n};\n/**\n * Returns an object that will inject `api` into all the functions inside\n * `allSections`, and keep the object architecture of `allSections`.\n */\n\n/** @internal */\n\nfunction injectFunctions(instanceId, api, allSections) {\n  var queryKeys = Object.keys(api.query);\n  return Object.keys(allSections).filter(function (sectionName) {\n    return !deriveAvail[sectionName] || deriveAvail[sectionName].some(function (query) {\n      return queryKeys.includes(query);\n    });\n  }).reduce(function (deriveAcc, sectionName) {\n    var section = allSections[sectionName];\n    deriveAcc[sectionName] = Object.keys(section).reduce(function (sectionAcc, _methodName) {\n      var methodName = _methodName; // Not sure what to do here, casting as any. Though the final types are good\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call\n\n      var method = section[methodName](instanceId, api); // idem\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n\n      sectionAcc[methodName] = method;\n      return sectionAcc;\n    }, {});\n    return deriveAcc;\n  }, {});\n} // FIXME The return type of this function should be {...ExactDerive, ...DeriveCustom}\n// For now we just drop the custom derive typings\n\n/** @internal */\n\n\nexport function decorateDerive(instanceId, api) {\n  var custom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return _objectSpread(_objectSpread({}, injectFunctions(instanceId, api, derive)), injectFunctions(instanceId, api, custom));\n}","map":null,"metadata":{},"sourceType":"module"}