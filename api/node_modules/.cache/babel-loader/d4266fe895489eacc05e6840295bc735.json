{"ast":null,"code":"import _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n// Copyright 2017-2021 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nvar recordIdentity = function recordIdentity(record) {\n  return record;\n};\n\nfunction filterAndApply(events, section, methods, onFound) {\n  return events.filter(function (_ref) {\n    var event = _ref.event;\n    return section === event.section && methods.includes(event.method);\n  }).map(function (record) {\n    return onFound(record);\n  });\n}\n\nfunction extractError() {\n  var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return filterAndApply(events, 'system', ['ExtrinsicFailed'], function (_ref2) {\n    var data = _ref2.event.data;\n    return data[0];\n  })[0];\n}\n\nfunction extractInfo() {\n  var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return filterAndApply(events, 'system', ['ExtrinsicFailed', 'ExtrinsicSuccess'], function (_ref3) {\n    var _ref3$event = _ref3.event,\n        data = _ref3$event.data,\n        method = _ref3$event.method;\n    return method === 'ExtrinsicSuccess' ? data[0] : data[1];\n  })[0];\n}\n\nexport var SubmittableResult = /*#__PURE__*/function () {\n  function SubmittableResult(_ref4) {\n    var dispatchError = _ref4.dispatchError,\n        dispatchInfo = _ref4.dispatchInfo,\n        events = _ref4.events,\n        internalError = _ref4.internalError,\n        status = _ref4.status;\n\n    _classCallCheck(this, SubmittableResult);\n\n    this.dispatchError = void 0;\n    this.dispatchInfo = void 0;\n    this.internalError = void 0;\n    this.events = void 0;\n    this.status = void 0;\n    this.dispatchError = dispatchError || extractError(events);\n    this.dispatchInfo = dispatchInfo || extractInfo(events);\n    this.events = events || [];\n    this.internalError = internalError;\n    this.status = status;\n  }\n\n  _createClass(SubmittableResult, [{\n    key: \"isCompleted\",\n    get: function get() {\n      return this.isError || this.status.isInBlock || this.status.isFinalized;\n    }\n  }, {\n    key: \"isError\",\n    get: function get() {\n      return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;\n    }\n  }, {\n    key: \"isFinalized\",\n    get: function get() {\n      return this.status.isFinalized;\n    }\n  }, {\n    key: \"isInBlock\",\n    get: function get() {\n      return this.status.isInBlock;\n    }\n  }, {\n    key: \"isWarning\",\n    get: function get() {\n      return this.status.isRetracted;\n    }\n    /**\n     * @description Filters EventRecords for the specified method & section (there could be multiple)\n     */\n\n  }, {\n    key: \"filterRecords\",\n    value: function filterRecords(section, method) {\n      return filterAndApply(this.events, section, Array.isArray(method) ? method : [method], recordIdentity);\n    }\n    /**\n     * @description Finds an EventRecord for the specified method & section\n     */\n\n  }, {\n    key: \"findRecord\",\n    value: function findRecord(section, method) {\n      return this.filterRecords(section, method)[0];\n    }\n    /**\n     * @description Creates a human representation of the output\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman(isExtended) {\n      var _this$dispatchError, _this$dispatchInfo, _this$internalError;\n\n      return {\n        dispatchError: (_this$dispatchError = this.dispatchError) === null || _this$dispatchError === void 0 ? void 0 : _this$dispatchError.toHuman(),\n        dispatchInfo: (_this$dispatchInfo = this.dispatchInfo) === null || _this$dispatchInfo === void 0 ? void 0 : _this$dispatchInfo.toHuman(),\n        events: this.events.map(function (event) {\n          return event.toHuman(isExtended);\n        }),\n        internalError: (_this$internalError = this.internalError) === null || _this$internalError === void 0 ? void 0 : _this$internalError.message.toString(),\n        status: this.status.toHuman(isExtended)\n      };\n    }\n  }]);\n\n  return SubmittableResult;\n}();","map":null,"metadata":{},"sourceType":"module"}