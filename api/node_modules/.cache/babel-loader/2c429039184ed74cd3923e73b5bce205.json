{"ast":null,"code":"import _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '@polkadot/util';\nimport { Enum } from \"./Enum.js\";\n/**\n * @name Result\n * @description\n * A Result maps to the Rust Result type, that can either wrap a success or error value\n */\n\nexport var Result = /*#__PURE__*/function (_Enum) {\n  _inherits(Result, _Enum);\n\n  var _super = _createSuper(Result);\n\n  function Result(registry, Ok, Err, value) {\n    _classCallCheck(this, Result);\n\n    // NOTE This is order-dependent, Ok (with index 0) needs to be first\n    // eslint-disable-next-line sort-keys\n    return _super.call(this, registry, {\n      Ok: Ok,\n      Err: Err\n    }, value);\n  }\n\n  _createClass(Result, [{\n    key: \"asErr\",\n    get:\n    /**\n     * @description Returns the wrapper Err value (if isErr)\n     */\n    function get() {\n      assert(this.isErr, 'Cannot extract Err value from Ok result, check isErr first');\n      return this.value;\n    }\n    /**\n     * @deprecated Use asErr\n     */\n\n  }, {\n    key: \"asError\",\n    get: function get() {\n      return this.asErr;\n    }\n    /**\n     * @description Returns the wrapper Ok value (if isOk)\n     */\n\n  }, {\n    key: \"asOk\",\n    get: function get() {\n      assert(this.isOk, 'Cannot extract Ok value from Err result, check isOk first');\n      return this.value;\n    }\n    /**\n     * @description Checks if the Result has no value\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.isOk && this.value.isEmpty;\n    }\n    /**\n     * @description Checks if the Result wraps an Err value\n     */\n\n  }, {\n    key: \"isErr\",\n    get: function get() {\n      return !this.isOk;\n    }\n    /**\n     * @deprecated Use isErr\n     */\n\n  }, {\n    key: \"isError\",\n    get: function get() {\n      return this.isErr;\n    }\n    /**\n     * @description Checks if the Result wraps an Ok value\n     */\n\n  }, {\n    key: \"isOk\",\n    get: function get() {\n      return this.index === 0;\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      var Types = this._toRawStruct();\n\n      return \"Result<\".concat(Types.Ok, \",\").concat(Types.Err, \">\");\n    }\n  }], [{\n    key: \"with\",\n    value: function _with(Types) {\n      return /*#__PURE__*/function (_Result) {\n        _inherits(_class, _Result);\n\n        var _super2 = _createSuper(_class);\n\n        function _class(registry, value) {\n          _classCallCheck(this, _class);\n\n          return _super2.call(this, registry, Types.Ok, Types.Err, value);\n        }\n\n        return _class;\n      }(Result);\n    }\n  }]);\n\n  return Result;\n}(Enum);","map":null,"metadata":{},"sourceType":"module"}