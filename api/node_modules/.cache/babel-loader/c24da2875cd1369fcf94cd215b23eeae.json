{"ast":null,"code":"import _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { u8aToHex } from '@polkadot/util';\nimport { Struct } from \"../codec/Struct.js\";\nvar knownTypes = {\n  address: 'Address',\n  blockHash: 'Hash',\n  blockNumber: 'BlockNumber',\n  era: 'ExtrinsicEra',\n  genesisHash: 'Hash',\n  method: 'Call',\n  nonce: 'Compact<Index>',\n  runtimeVersion: 'RuntimeVersion',\n  signedExtensions: 'Vec<Text>',\n  tip: 'Compact<Balance>',\n  version: 'u8'\n};\n/**\n * @name GenericSignerPayload\n * @description\n * A generic signer payload that can be used for serialization between API and signer\n */\n\nexport var GenericSignerPayload = /*#__PURE__*/function (_Struct) {\n  _inherits(GenericSignerPayload, _Struct);\n\n  var _super = _createSuper(GenericSignerPayload);\n\n  function GenericSignerPayload(registry, value) {\n    var _this;\n\n    _classCallCheck(this, GenericSignerPayload);\n\n    var extensionTypes = _objectSpread(_objectSpread({}, registry.getSignedExtensionTypes()), registry.getSignedExtensionExtra());\n\n    _this = _super.call(this, registry, _objectSpread(_objectSpread({}, extensionTypes), knownTypes), value); // add all extras that are not in the base types\n\n    _this._extraTypes = void 0;\n    _this._extraTypes = Object.entries(extensionTypes).reduce(function (map, _ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          type = _ref2[1];\n\n      if (!knownTypes[key]) {\n        map[key] = type;\n      }\n\n      return map;\n    }, {});\n    return _this;\n  }\n\n  _createClass(GenericSignerPayload, [{\n    key: \"address\",\n    get: function get() {\n      return this.get('address');\n    }\n  }, {\n    key: \"blockHash\",\n    get: function get() {\n      return this.get('blockHash');\n    }\n  }, {\n    key: \"blockNumber\",\n    get: function get() {\n      return this.get('blockNumber');\n    }\n  }, {\n    key: \"era\",\n    get: function get() {\n      return this.get('era');\n    }\n  }, {\n    key: \"genesisHash\",\n    get: function get() {\n      return this.get('genesisHash');\n    }\n  }, {\n    key: \"method\",\n    get: function get() {\n      return this.get('method');\n    }\n  }, {\n    key: \"nonce\",\n    get: function get() {\n      return this.get('nonce');\n    }\n  }, {\n    key: \"runtimeVersion\",\n    get: function get() {\n      return this.get('runtimeVersion');\n    }\n  }, {\n    key: \"signedExtensions\",\n    get: function get() {\n      return this.get('signedExtensions');\n    }\n  }, {\n    key: \"tip\",\n    get: function get() {\n      return this.get('tip');\n    }\n  }, {\n    key: \"version\",\n    get: function get() {\n      return this.get('version');\n    }\n    /**\n     * @description Creates an representation of the structure as an ISignerPayload JSON\n     */\n\n  }, {\n    key: \"toPayload\",\n    value: function toPayload() {\n      var _this2 = this;\n\n      return _objectSpread(_objectSpread({}, Object.keys(this._extraTypes).reduce(function (map, key) {\n        map[key] = _this2.get(key).toHex();\n        return map;\n      }, {})), {}, {\n        // the known defaults as managed explicitly and has different\n        // formatting in cases, e.g. we mostly expose a hex format here\n        address: this.address.toString(),\n        blockHash: this.blockHash.toHex(),\n        blockNumber: this.blockNumber.toHex(),\n        era: this.era.toHex(),\n        genesisHash: this.genesisHash.toHex(),\n        method: this.method.toHex(),\n        nonce: this.nonce.toHex(),\n        signedExtensions: this.signedExtensions.map(function (e) {\n          return e.toString();\n        }),\n        specVersion: this.runtimeVersion.specVersion.toHex(),\n        tip: this.tip.toHex(),\n        transactionVersion: this.runtimeVersion.transactionVersion.toHex(),\n        version: this.version.toNumber()\n      });\n    }\n    /**\n     * @description Creates a representation of the payload in raw Exrinsic form\n     */\n\n  }, {\n    key: \"toRaw\",\n    value: function toRaw() {\n      var payload = this.toPayload();\n      var data = u8aToHex(this.registry.createType('ExtrinsicPayload', payload, {\n        version: payload.version\n      }) // NOTE Explicitly pass the bare flag so the method is encoded un-prefixed (non-decodable, for signing only)\n      .toU8a({\n        method: true\n      }));\n      return {\n        address: payload.address,\n        data: data,\n        type: 'payload'\n      };\n    }\n  }]);\n\n  return GenericSignerPayload;\n}(Struct);","map":null,"metadata":{},"sourceType":"module"}