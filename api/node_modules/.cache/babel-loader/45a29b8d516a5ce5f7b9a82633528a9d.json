{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { deriveNoopCache } from \"./cacheImpl.js\";\nvar CHACHE_EXPIRY = 7 * (24 * 60) * (60 * 1000);\nvar deriveCache;\n\nfunction wrapCache(keyStart, cache) {\n  return {\n    del: function del(partial) {\n      return cache.del(\"\".concat(keyStart).concat(partial));\n    },\n    forEach: cache.forEach,\n    get: function get(partial) {\n      var key = \"\".concat(keyStart).concat(partial);\n      var cached = cache.get(key);\n\n      if (cached) {\n        cached.x = Date.now();\n        cache.set(key, cached);\n        return cached.v;\n      }\n\n      return undefined;\n    },\n    set: function set(partial, v) {\n      cache.set(\"\".concat(keyStart).concat(partial), {\n        v: v,\n        x: Date.now()\n      });\n    }\n  };\n}\n\nfunction clearCache(cache) {\n  // clear all expired values\n  var now = Date.now();\n  var all = [];\n  cache.forEach(function (key, _ref) {\n    var x = _ref.x;\n    now - x > CHACHE_EXPIRY && all.push(key);\n  }); // don't do delete inside loop, just in-case\n\n  all.forEach(function (key) {\n    return cache.del(key);\n  });\n}\n\nexport function setDeriveCache() {\n  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var cache = arguments.length > 1 ? arguments[1] : undefined;\n  deriveCache = cache ? wrapCache(\"derive:\".concat(prefix, \":\"), cache) : deriveNoopCache;\n\n  if (cache) {\n    clearCache(cache);\n  }\n}\nsetDeriveCache();\nexport { deriveCache };","map":null,"metadata":{},"sourceType":"module"}