{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, stringToU8a, u8aFixLength } from '@polkadot/util';\nimport { naclDecrypt } from \"../nacl/index.js\";\nimport { scryptEncode, scryptFromU8a } from \"../scrypt/index.js\";\nimport { ENCODING, NONCE_LENGTH, SCRYPT_LENGTH } from \"./constants.js\";\nexport function jsonDecryptData(encrypted, passphrase) {\n  var encType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ENCODING;\n  assert(encrypted, 'No encrypted data available to decode');\n  assert(passphrase || !encType.includes('xsalsa20-poly1305'), 'Password required to decode encypted data');\n  var encoded = encrypted;\n\n  if (passphrase) {\n    var password;\n\n    if (encType.includes('scrypt')) {\n      var _scryptFromU8a = scryptFromU8a(encrypted),\n          params = _scryptFromU8a.params,\n          salt = _scryptFromU8a.salt;\n\n      password = scryptEncode(passphrase, salt, params).password;\n      encrypted = encrypted.subarray(SCRYPT_LENGTH);\n    } else {\n      password = stringToU8a(passphrase);\n    }\n\n    encoded = naclDecrypt(encrypted.subarray(NONCE_LENGTH), encrypted.subarray(0, NONCE_LENGTH), u8aFixLength(password, 256, true));\n  }\n\n  assert(encoded, 'Unable to decode using the supplied passphrase');\n  return encoded;\n}","map":null,"metadata":{},"sourceType":"module"}