{"ast":null,"code":"import _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _get from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _wrapNativeSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _toConsumableArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport BN from 'bn.js';\nimport { assert, bnToBn, bnToU8a, isBn, isNumber, isString, isU8a, isUndefined, stringCamelCase, stringUpperFirst, u8aToBn, u8aToHex, u8aToU8a } from '@polkadot/util';\nimport { compareArray } from \"./utils/index.js\";\n\nfunction encodeSet(setValues, value) {\n  return value.reduce(function (result, value) {\n    return result.or(bnToBn(setValues[value] || 0));\n  }, new BN(0));\n}\n/** @internal */\n\n\nfunction decodeSetArray(setValues, value) {\n  return value.reduce(function (result, key) {\n    assert(!isUndefined(setValues[key]), \"Set: Invalid key '\".concat(key, \"' passed to Set, allowed \").concat(Object.keys(setValues).join(', ')));\n    result.push(key);\n    return result;\n  }, []);\n}\n/** @internal */\n\n\nfunction decodeSetNumber(setValues, _value) {\n  var bn = bnToBn(_value);\n  var result = Object.keys(setValues).reduce(function (result, key) {\n    if (bn.and(bnToBn(setValues[key])).eq(bnToBn(setValues[key]))) {\n      result.push(key);\n    }\n\n    return result;\n  }, []);\n  var computed = encodeSet(setValues, result);\n  assert(bn.eq(computed), \"Set: Mismatch decoding '\".concat(bn.toString(), \"', computed as '\").concat(computed.toString(), \"' with \").concat(result.join(', ')));\n  return result;\n}\n/** @internal */\n\n\nfunction decodeSet(setValues) {\n  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var bitLength = arguments.length > 2 ? arguments[2] : undefined;\n  assert(bitLength % 8 === 0, \"Expected valid bitLength, power of 8, found \".concat(bitLength));\n  var byteLength = bitLength / 8;\n\n  if (isString(value)) {\n    return decodeSet(setValues, u8aToU8a(value), byteLength);\n  } else if (isU8a(value)) {\n    return value.length === 0 ? [] : decodeSetNumber(setValues, u8aToBn(value.subarray(0, byteLength), {\n      isLe: true\n    }));\n  } else if (value instanceof Set || Array.isArray(value)) {\n    var input = Array.isArray(value) ? value : _toConsumableArray(value.values());\n    return decodeSetArray(setValues, input);\n  }\n\n  return decodeSetNumber(setValues, value);\n}\n/**\n * @name Set\n * @description\n * An Set is an array of string values, represented an an encoded type by\n * a bitwise representation of the values.\n */\n// FIXME This is a prime candidate to extend the JavaScript built-in Set\n\n\nvar _allowed = _classPrivateFieldLooseKey(\"allowed\");\n\nvar _byteLength = _classPrivateFieldLooseKey(\"byteLength\");\n\nexport var CodecSet = /*#__PURE__*/function (_Set) {\n  _inherits(CodecSet, _Set);\n\n  var _super = _createSuper(CodecSet);\n\n  function CodecSet(registry, setValues, value) {\n    var _thisSuper, _this;\n\n    var bitLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n\n    _classCallCheck(this, CodecSet);\n\n    _this = _super.call(this, decodeSet(setValues, value, bitLength));\n    _this.registry = void 0;\n    _this.createdAtHash = void 0;\n    Object.defineProperty(_assertThisInitialized(_this), _allowed, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_assertThisInitialized(_this), _byteLength, {\n      writable: true,\n      value: void 0\n    });\n\n    _this.add = function (key) {\n      // ^^^ add = () property done to assign this instance's this, otherwise Set.add creates \"some\" chaos\n      // we have the isUndefined(this._setValues) in here as well, add is used internally\n      // in the Set constructor (so it is undefined at this point, and should allow)\n      assert(isUndefined(_classPrivateFieldLooseBase(_assertThisInitialized(_this), _allowed)[_allowed]) || !isUndefined(_classPrivateFieldLooseBase(_assertThisInitialized(_this), _allowed)[_allowed][key]), \"Set: Invalid key '\".concat(key, \"' on add\"));\n\n      _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(CodecSet.prototype)), \"add\", _thisSuper).call(_thisSuper, key);\n\n      return _assertThisInitialized(_this);\n    };\n\n    _this.registry = registry;\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _allowed)[_allowed] = setValues;\n    _classPrivateFieldLooseBase(_assertThisInitialized(_this), _byteLength)[_byteLength] = bitLength / 8;\n    return _this;\n  }\n\n  _createClass(CodecSet, [{\n    key: \"encodedLength\",\n    get:\n    /**\n     * @description The length of the value when encoded as a Uint8Array\n     */\n    function get() {\n      return _classPrivateFieldLooseBase(this, _byteLength)[_byteLength];\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description true is the Set contains no values\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.size === 0;\n    }\n    /**\n     * @description The actual set values as a string[]\n     */\n\n  }, {\n    key: \"strings\",\n    get: function get() {\n      return _toConsumableArray(_get(_getPrototypeOf(CodecSet.prototype), \"values\", this).call(this));\n    }\n    /**\n     * @description The encoded value for the set members\n     */\n\n  }, {\n    key: \"valueEncoded\",\n    get: function get() {\n      return encodeSet(_classPrivateFieldLooseBase(this, _allowed)[_allowed], this.strings);\n    }\n    /**\n     * @description adds a value to the Set (extended to allow for validity checking)\n     */\n\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      if (Array.isArray(other)) {\n        // we don't actually care about the order, sort the values\n        return compareArray(this.strings.sort(), other.sort());\n      } else if (other instanceof Set) {\n        return this.eq(_toConsumableArray(other.values()));\n      } else if (isNumber(other) || isBn(other)) {\n        return this.valueEncoded.eq(bnToBn(other));\n      }\n\n      return false;\n    }\n    /**\n     * @description Returns a hex string representation of the value\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return u8aToHex(this.toU8a());\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman() {\n      return this.toJSON();\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.strings;\n    }\n    /**\n     * @description The encoded value for the set members\n     */\n\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      return this.valueEncoded.toNumber();\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return JSON.stringify({\n        _set: _classPrivateFieldLooseBase(this, _allowed)[_allowed]\n      });\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"[\".concat(this.strings.join(', '), \"]\");\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      return bnToU8a(this.valueEncoded, {\n        bitLength: _classPrivateFieldLooseBase(this, _byteLength)[_byteLength] * 8,\n        isLe: true\n      });\n    }\n  }], [{\n    key: \"with\",\n    value: function _with(values, bitLength) {\n      return /*#__PURE__*/function (_CodecSet) {\n        _inherits(_class, _CodecSet);\n\n        var _super2 = _createSuper(_class);\n\n        function _class(registry, value) {\n          var _this2;\n\n          _classCallCheck(this, _class);\n\n          _this2 = _super2.call(this, registry, values, value, bitLength);\n          Object.keys(values).forEach(function (_key) {\n            var name = stringUpperFirst(stringCamelCase(_key));\n            var iskey = \"is\".concat(name);\n            isUndefined(_this2[iskey]) && Object.defineProperty(_assertThisInitialized(_this2), iskey, {\n              enumerable: true,\n              get: function get() {\n                return _this2.strings.includes(_key);\n              }\n            });\n          });\n          return _this2;\n        }\n\n        return _class;\n      }(CodecSet);\n    }\n  }]);\n\n  return CodecSet;\n}( /*#__PURE__*/_wrapNativeSuper(Set));","map":null,"metadata":{},"sourceType":"module"}