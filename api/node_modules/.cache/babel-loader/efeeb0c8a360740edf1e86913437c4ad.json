{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { hexAddPrefix } from \"./addPrefix.js\";\nimport { hexStripPrefix } from \"./stripPrefix.js\";\n/**\n * @name hexFixLength\n * @summary Shifts a hex string to a specific bitLength\n * @description\n * Returns a `0x` prefixed string with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length. Input values with less bits are returned as-is by default. When `withPadding` is set, shorter values are padded with `0`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexFixLength } from '@polkadot/util';\n *\n * console.log('fixed', hexFixLength('0x12', 16)); // => 0x12\n * console.log('fixed', hexFixLength('0x12', 16, true)); // => 0x0012\n * console.log('fixed', hexFixLength('0x0012', 8)); // => 0x12\n * ```\n */\n\nexport function hexFixLength(value) {\n  var bitLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n  var withPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var strLength = Math.ceil(bitLength / 4);\n  var hexLength = strLength + 2;\n  return hexAddPrefix(bitLength === -1 || value.length === hexLength || !withPadding && value.length < hexLength ? hexStripPrefix(value) : value.length > hexLength ? hexStripPrefix(value).slice(-1 * strLength) : \"\".concat('0'.repeat(strLength)).concat(hexStripPrefix(value)).slice(-1 * strLength));\n}","map":null,"metadata":{},"sourceType":"module"}