{"ast":null,"code":"import _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { u8aToHex } from '@polkadot/util';\nimport { Base } from \"../codec/Base.js\";\nimport { DEFAULT_VERSION } from \"./constants.js\";\nvar VERSIONS = ['ExtrinsicPayloadUnknown', // v0 is unknown\n'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadV4'];\n/**\n * @name GenericExtrinsicPayload\n * @description\n * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based\n * on the contents included\n */\n\nexport var GenericExtrinsicPayload = /*#__PURE__*/function (_Base) {\n  _inherits(GenericExtrinsicPayload, _Base);\n\n  var _super = _createSuper(GenericExtrinsicPayload);\n\n  function GenericExtrinsicPayload(registry, value) {\n    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        version = _ref.version;\n\n    _classCallCheck(this, GenericExtrinsicPayload);\n\n    return _super.call(this, registry, GenericExtrinsicPayload.decodeExtrinsicPayload(registry, value, version));\n  }\n  /** @internal */\n\n\n  _createClass(GenericExtrinsicPayload, [{\n    key: \"blockHash\",\n    get:\n    /**\n     * @description The block [[Hash]] the signature applies to (mortal/immortal)\n     */\n    function get() {\n      return this._raw.blockHash;\n    }\n    /**\n     * @description The [[ExtrinsicEra]]\n     */\n\n  }, {\n    key: \"era\",\n    get: function get() {\n      return this._raw.era;\n    }\n    /**\n     * @description The genesis block [[Hash]] the signature applies to\n     */\n\n  }, {\n    key: \"genesisHash\",\n    get: function get() {\n      // NOTE only v3+\n      return this._raw.genesisHash || this.registry.createType('Hash');\n    }\n    /**\n     * @description The [[Raw]] contained in the payload\n     */\n\n  }, {\n    key: \"method\",\n    get: function get() {\n      return this._raw.method;\n    }\n    /**\n     * @description The [[Index]]\n     */\n\n  }, {\n    key: \"nonce\",\n    get: function get() {\n      return this._raw.nonce;\n    }\n    /**\n     * @description The specVersion as a [[u32]] for this payload\n     */\n\n  }, {\n    key: \"specVersion\",\n    get: function get() {\n      // NOTE only v3+\n      return this._raw.specVersion || this.registry.createType('u32');\n    }\n    /**\n     * @description The [[Balance]]\n     */\n\n  }, {\n    key: \"tip\",\n    get: function get() {\n      // NOTE from v2+\n      return this._raw.tip || this.registry.createType('Compact<Balance>');\n    }\n    /**\n     * @description The transaction version as a [[u32]] for this payload\n     */\n\n  }, {\n    key: \"transactionVersion\",\n    get: function get() {\n      // NOTE only v4+\n      return this._raw.transactionVersion || this.registry.createType('u32');\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return this._raw.eq(other);\n    }\n    /**\n     * @description Sign the payload with the keypair\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign(signerPair) {\n      var signature = this._raw.sign(signerPair); // This is extensible, so we could quite readily extend to send back extra\n      // information, such as for instance the payload, i.e. `payload: this.toHex()`\n      // For the case here we sign via the extrinsic, we ignore the return, so generally\n      // this is applicable for external signing\n\n\n      return {\n        signature: u8aToHex(signature)\n      };\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman(isExtended) {\n      return this._raw.toHuman(isExtended);\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toHex();\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toHex();\n    }\n    /**\n     * @description Returns a serialized u8a form\n     */\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      // call our parent, with only the method stripped\n      return _get(_getPrototypeOf(GenericExtrinsicPayload.prototype), \"toU8a\", this).call(this, isBare ? {\n        method: true\n      } : false);\n    }\n  }], [{\n    key: \"decodeExtrinsicPayload\",\n    value: function decodeExtrinsicPayload(registry, value) {\n      var version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_VERSION;\n\n      if (value instanceof GenericExtrinsicPayload) {\n        return value._raw;\n      }\n\n      return registry.createType(VERSIONS[version] || VERSIONS[0], value, {\n        version: version\n      });\n    }\n  }]);\n\n  return GenericExtrinsicPayload;\n}(Base);","map":null,"metadata":{},"sourceType":"module"}