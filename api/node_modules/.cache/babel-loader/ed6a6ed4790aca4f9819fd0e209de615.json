{"ast":null,"code":"import _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// adapted from https://github.com/multiformats/js-multibase/blob/424709195b46ffb1d6f2f69a7707598ebe751e5e/src/rfc4648.js\nimport { assert } from '@polkadot/util';\nimport { BASE32_ALPHABET, BITS_PER_CHAR } from \"./bs32.js\";\nimport { base32Validate } from \"./validate.js\"; // Build the character lookup table:\n\nvar LOOKUP = BASE32_ALPHABET.split('').reduce(function (lookup, char, index) {\n  lookup[char] = index;\n  return lookup;\n}, {});\n/** @internal */\n\nfunction decode(output, input, offset) {\n  var bits = 0;\n  var buffer = 0;\n  var written = 0;\n\n  for (var i = offset; i < input.length; i++) {\n    buffer = buffer << BITS_PER_CHAR | LOOKUP[input[i]];\n    bits += BITS_PER_CHAR;\n\n    if (bits >= 8) {\n      bits -= 8;\n      output[written++] = 0xff & buffer >> bits;\n    }\n  }\n\n  return [output, bits, buffer];\n}\n/**\n * @name base32Decode\n * @summary Delookup a base32 value.\n * @description\n * From the provided input, decode the base32 and return the result as an `Uint8Array`.\n */\n\n\nexport function base32Decode(value) {\n  var ipfsCompat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  base32Validate(value, ipfsCompat);\n  var offset = ipfsCompat ? 1 : 0;\n\n  var _decode = decode(new Uint8Array((value.length - offset) * BITS_PER_CHAR / 8 | 0), value, offset),\n      _decode2 = _slicedToArray(_decode, 3),\n      output = _decode2[0],\n      bits = _decode2[1],\n      buffer = _decode2[2];\n\n  assert(!(bits >= BITS_PER_CHAR || 0xff & buffer << 8 - bits), 'Unexpected end of data');\n  return output;\n}","map":null,"metadata":{},"sourceType":"module"}