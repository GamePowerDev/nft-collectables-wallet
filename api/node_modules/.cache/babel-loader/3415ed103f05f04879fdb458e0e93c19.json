{"ast":null,"code":"import _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// Original implementation: https://github.com/paritytech/polka-ui/blob/4858c094684769080f5811f32b081dd7780b0880/src/polkadot.js#L6\nimport { assert, isHex, isU8a, u8aToU8a } from '@polkadot/util';\nimport { base58Decode } from \"../base58/decode.js\";\nimport { checkAddressChecksum } from \"./checksum.js\";\nimport { defaults } from \"./defaults.js\";\nexport function decodeAddress(encoded, ignoreChecksum) {\n  var ss58Format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n  assert(encoded, 'Invalid empty address passed');\n\n  if (isU8a(encoded) || isHex(encoded)) {\n    return u8aToU8a(encoded);\n  }\n\n  try {\n    var decoded = base58Decode(encoded);\n    assert(defaults.allowedEncodedLengths.includes(decoded.length), 'Invalid decoded address length');\n\n    var _checkAddressChecksum = checkAddressChecksum(decoded),\n        _checkAddressChecksum2 = _slicedToArray(_checkAddressChecksum, 4),\n        isValid = _checkAddressChecksum2[0],\n        endPos = _checkAddressChecksum2[1],\n        ss58Length = _checkAddressChecksum2[2],\n        ss58Decoded = _checkAddressChecksum2[3];\n\n    assert(ignoreChecksum || isValid, 'Invalid decoded address checksum');\n    assert([-1, ss58Decoded].includes(ss58Format), \"Expected ss58Format \".concat(ss58Format, \", received \").concat(ss58Decoded));\n    return decoded.slice(ss58Length, endPos);\n  } catch (error) {\n    throw new Error(\"Decoding \".concat(encoded, \": \").concat(error.message));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}