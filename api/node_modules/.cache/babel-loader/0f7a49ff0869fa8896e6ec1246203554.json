{"ast":null,"code":"import _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.js\"; // SeatHolder is current tuple is 2.x-era Substrate\n\nfunction isSeatHolder(value) {\n  return !Array.isArray(value);\n}\n\nfunction isCandidateTuple(value) {\n  return Array.isArray(value);\n}\n\nfunction getAccountTuple(value) {\n  return isSeatHolder(value) ? [value.who, value.stake] : value;\n}\n\nfunction getCandidate(value) {\n  return isCandidateTuple(value) ? value[0] : value;\n}\n\nfunction sortAccounts(_ref, _ref2) {\n  var _ref3 = _slicedToArray(_ref, 2),\n      balanceA = _ref3[1];\n\n  var _ref4 = _slicedToArray(_ref2, 2),\n      balanceB = _ref4[1];\n\n  return balanceB.cmp(balanceA);\n}\n\nfunction queryElections(api) {\n  var section = api.query.electionsPhragmen ? 'electionsPhragmen' : 'elections';\n  return api.queryMulti([api.query.council.members, api.query[section].candidates, api.query[section].members, api.query[section].runnersUp]).pipe(map(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 4),\n        councilMembers = _ref6[0],\n        candidates = _ref6[1],\n        members = _ref6[2],\n        runnersUp = _ref6[3];\n\n    return {\n      candidacyBond: api.consts[section].candidacyBond,\n      candidateCount: api.registry.createType('u32', candidates.length),\n      candidates: candidates.map(getCandidate),\n      desiredRunnersUp: api.consts[section].desiredRunnersUp,\n      desiredSeats: api.consts[section].desiredMembers,\n      members: members.length ? members.map(getAccountTuple).sort(sortAccounts) : councilMembers.map(function (accountId) {\n        return [accountId, api.registry.createType('Balance')];\n      }),\n      runnersUp: runnersUp.map(getAccountTuple).sort(sortAccounts),\n      termDuration: api.consts[section].termDuration,\n      votingBond: api.consts[section].votingBond\n    };\n  }));\n}\n/**\n * @name info\n * @returns An object containing the combined results of the storage queries for\n * all relevant election module properties.\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.elections.info(({ members, candidates }) => {\n *   console.log(`There are currently ${members.length} council members and ${candidates.length} prospective council candidates.`);\n * });\n * ```\n */\n\n\nexport function info(instanceId, api) {\n  return memo(instanceId, function () {\n    return queryElections(api);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}