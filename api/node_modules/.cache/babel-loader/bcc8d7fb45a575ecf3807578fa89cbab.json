{"ast":null,"code":"import _regeneratorRuntime from\"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import*as types from\"../types\";import*as actions from\"../actions\";var claimNFTFlow=function claimNFTFlow(_ref){var api=_ref.api;return function(_ref2){var getState=_ref2.getState,dispatch=_ref2.dispatch;return function(next){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(action){var _yield$getState$provi,connection,provider,result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:next(action);if(!(action.type===types.CLAIM_NFT)){_context.next=14;break;}_context.prev=2;_context.next=5;return getState().providerReducer.connection;case 5:_yield$getState$provi=_context.sent;connection=_yield$getState$provi.connection;provider=_yield$getState$provi.provider;//TODO: call the claim transaction\n// send the claim result\nresult={type:types.CLAIM_NFT_SUCCESS,payload:{claim:action.payload}};dispatch(actions.sendResults(result));_context.next=14;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](2);case 14:case\"end\":return _context.stop();}}},_callee,null,[[2,12]]);}));return function(_x){return _ref3.apply(this,arguments);};}();};};};export default[claimNFTFlow];","map":null,"metadata":{},"sourceType":"module"}