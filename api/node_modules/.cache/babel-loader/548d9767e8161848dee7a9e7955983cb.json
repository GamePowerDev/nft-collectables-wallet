{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nvar HRS = 60 * 60;\nvar DAY = HRS * 24;\n/**\n * @name addTime\n * @summary Add together two Time arrays\n */\n\nfunction addTime(a, b) {\n  return {\n    days: a.days + b.days,\n    hours: a.hours + b.hours,\n    milliseconds: a.milliseconds + b.milliseconds,\n    minutes: a.minutes + b.minutes,\n    seconds: a.seconds + b.seconds\n  };\n}\n\nvar ZERO = {\n  days: 0,\n  hours: 0,\n  milliseconds: 0,\n  minutes: 0,\n  seconds: 0\n};\n\nfunction extractDays(milliseconds, hrs) {\n  var days = Math.floor(hrs / 24);\n  return addTime(_objectSpread(_objectSpread({}, ZERO), {}, {\n    days: days\n  }), extractTime(milliseconds - days * DAY * 1000));\n}\n\nfunction extractHrs(milliseconds, mins) {\n  var hrs = mins / 60;\n\n  if (hrs < 24) {\n    var hours = Math.floor(hrs);\n    return addTime(_objectSpread(_objectSpread({}, ZERO), {}, {\n      hours: hours\n    }), extractTime(milliseconds - hours * HRS * 1000));\n  }\n\n  return extractDays(milliseconds, hrs);\n}\n\nfunction extractMins(milliseconds, secs) {\n  var mins = secs / 60;\n\n  if (mins < 60) {\n    var minutes = Math.floor(mins);\n    return addTime(_objectSpread(_objectSpread({}, ZERO), {}, {\n      minutes: minutes\n    }), extractTime(milliseconds - minutes * 60 * 1000));\n  }\n\n  return extractHrs(milliseconds, mins);\n}\n\nfunction extractSecs(milliseconds) {\n  var secs = milliseconds / 1000;\n\n  if (secs < 60) {\n    var seconds = Math.floor(secs);\n    return addTime(_objectSpread(_objectSpread({}, ZERO), {}, {\n      seconds: seconds\n    }), extractTime(milliseconds - seconds * 1000));\n  }\n\n  return extractMins(milliseconds, secs);\n}\n/**\n * @name extractTime\n * @summary Convert a quantity of seconds to Time array representing accumulated {days, minutes, hours, seconds, milliseconds}\n * @example\n * <BR>\n *\n * ```javascript\n * import { extractTime } from '@polkadot/util';\n *\n * const { days, minutes, hours, seconds, milliseconds } = extractTime(6000); // 0, 0, 10, 0, 0\n * ```\n */\n\n\nexport function extractTime(milliseconds) {\n  if (!milliseconds) {\n    return ZERO;\n  } else if (milliseconds < 1000) {\n    return _objectSpread(_objectSpread({}, ZERO), {}, {\n      milliseconds: milliseconds\n    });\n  }\n\n  return extractSecs(milliseconds);\n}","map":null,"metadata":{},"sourceType":"module"}