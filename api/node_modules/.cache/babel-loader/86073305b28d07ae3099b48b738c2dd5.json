{"ast":null,"code":"import _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isAscii, isUndefined, isUtf8, u8aToHex, u8aToString, u8aToU8a } from '@polkadot/util';\n/**\n * @name Raw\n * @description\n * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ\n * from other implementations where it will consume the full Uint8Array as passed to it.\n * As such it is meant to be subclassed where the wrapper takes care of the\n * actual lengths instead of used directly.\n * @noInheritDoc\n */\n\nexport var Raw = /*#__PURE__*/function (_Uint8Array) {\n  _inherits(Raw, _Uint8Array);\n\n  var _super = _createSuper(Raw);\n\n  function Raw(registry, value) {\n    var _this;\n\n    _classCallCheck(this, Raw);\n\n    _this = _super.call(this, u8aToU8a(value));\n    _this.registry = void 0;\n    _this.createdAtHash = void 0;\n    _this.registry = registry;\n    return _this;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  _createClass(Raw, [{\n    key: \"encodedLength\",\n    get: function get() {\n      return this.length;\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description Returns true if the wrapped value contains only ASCII printable characters\n     */\n\n  }, {\n    key: \"isAscii\",\n    get: function get() {\n      return isAscii(this);\n    }\n    /**\n     * @description Returns true if the type wraps an empty/default all-0 value\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return !this.length || isUndefined(this.find(function (value) {\n        return !!value;\n      }));\n    }\n    /**\n     * @description Returns true if the wrapped value contains only utf8 characters\n     */\n\n  }, {\n    key: \"isUtf8\",\n    get: function get() {\n      return isUtf8(this);\n    }\n    /**\n     * @description The length of the value\n     */\n\n  }, {\n    key: \"length\",\n    get: function get() {\n      // only included here since we ignore inherited docs\n      return _get(_getPrototypeOf(Raw.prototype), \"length\", this);\n    }\n    /**\n     * @description Returns the number of bits in the value\n     */\n\n  }, {\n    key: \"bitLength\",\n    value: function bitLength() {\n      return this.length * 8;\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      if (other instanceof Uint8Array) {\n        return this.length === other.length && !this.some(function (value, index) {\n          return value !== other[index];\n        });\n      }\n\n      return this.eq(u8aToU8a(other));\n    }\n    /**\n     * @description Create a new slice from the actual buffer. (compat)\n     * @param start The position to start at\n     * @param end The position to end at\n     */\n\n  }, {\n    key: \"slice\",\n    value: function slice(start, end) {\n      // Like subarray below, we have to follow this approach since we are extending the TypeArray.\n      // This happens especially when it comes to further extensions, the length may be an override\n      return Uint8Array.from(this).slice(start, end);\n    }\n    /**\n     * @description Create a new subarray from the actual buffer. (compat)\n     * @param begin The position to start at\n     * @param end The position to end at\n     */\n\n  }, {\n    key: \"subarray\",\n    value: function subarray(begin, end) {\n      return Uint8Array.from(this).subarray(begin, end);\n    }\n    /**\n     * @description Returns a hex string representation of the value\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return u8aToHex(this);\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman() {\n      return this.isAscii ? this.toUtf8() : this.toJSON();\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toHex();\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return 'Raw';\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toHex();\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      return Uint8Array.from(this);\n    }\n    /**\n     * @description Returns the wrapped data as a UTF-8 string\n     */\n\n  }, {\n    key: \"toUtf8\",\n    value: function toUtf8() {\n      assert(this.isUtf8, 'The character sequence is not a valid Utf8 string');\n      return u8aToString(this);\n    }\n  }]);\n\n  return Raw;\n}( /*#__PURE__*/_wrapNativeSuper(Uint8Array));","map":null,"metadata":{},"sourceType":"module"}