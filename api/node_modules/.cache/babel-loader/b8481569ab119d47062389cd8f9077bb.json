{"ast":null,"code":"import _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, compactFromU8a } from '@polkadot/util';\nimport { combineLatest, of } from '@polkadot/x-rxjs';\nimport { map, take } from '@polkadot/x-rxjs/operators'; // the order and types needs to map with the all array setup below\n\nvar NumberMap = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten'];\n\nfunction mapCapabilities(_ref, _ref2, _ref3, _ref4) {\n  var accountIdLength = _ref.accountIdLength;\n\n  var _ref5 = _slicedToArray(_ref2, 2),\n      leasePeriodsPerSlot = _ref5[0],\n      slotRangeCount = _ref5[1];\n\n  var _ref6 = _slicedToArray(_ref3, 4),\n      systemRefcount32 = _ref6[0],\n      systemRefcountDual = _ref6[1],\n      systemRefcountTriple = _ref6[2],\n      stakingVersion = _ref6[3];\n\n  var _ref7 = _slicedToArray(_ref4, 1),\n      keys = _ref7[0];\n\n  var types = {}; // AccountInfo\n\n  if (systemRefcountTriple && systemRefcountTriple.isTrue) {\n    types.AccountInfo = 'AccountInfoWithTripleRefCount';\n  } else if (systemRefcountDual && systemRefcountDual.isTrue) {\n    types.AccountInfo = 'AccountInfoWithDualRefCount';\n  } else {\n    types.AccountInfo = 'AccountInfoWithRefCount';\n\n    if (!systemRefcount32 || systemRefcount32.isFalse) {\n      types.RefCount = 'u8';\n    }\n  } // ValidatorPrefs\n\n\n  if (stakingVersion) {\n    if (stakingVersion.index >= 4) {\n      // v1 = index 0, V5 = index 4\n      types.ValidatorPrefs = 'ValidatorPrefsWithBlocked';\n    } else {\n      types.ValidatorPrefs = 'ValidatorPrefsWithCommission';\n    }\n  } // Keys\n\n\n  if (keys) {\n    try {\n      var _compactFromU8a = compactFromU8a(keys),\n          _compactFromU8a2 = _slicedToArray(_compactFromU8a, 2),\n          offset = _compactFromU8a2[0],\n          numItems = _compactFromU8a2[1];\n\n      var tupleLength = (keys.length - offset) / numItems.toNumber();\n      var numIds = tupleLength / accountIdLength;\n      var numIdsRound = Math.floor(numIds);\n      assert(numIds >= 2 && numIds <= 11, \"Detected \".concat(numIds, \" in Keys, should be >= 2 and <= 11\"));\n\n      if (numIdsRound !== numIds) {\n        // Beefy?\n        if ((numIdsRound - 1) * accountIdLength + 33 === tupleLength) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          types.Keys = \"SessionKeys\".concat(numIdsRound - 1, \"B\");\n        } else {\n          assert(false, \"Expected integer number of keys, found \".concat(numIds.toFixed(2)));\n        }\n      } else {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        types.Keys = \"SessionKeys\".concat(numIds - 1);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  } // auctions\n\n\n  if (leasePeriodsPerSlot && slotRangeCount) {\n    var _enum = [];\n\n    for (var i = 0; leasePeriodsPerSlot.gtn(i); i++) {\n      for (var j = i; leasePeriodsPerSlot.gtn(j); j++) {\n        _enum.push(\"\".concat(NumberMap[i]).concat(NumberMap[j]));\n      }\n    }\n\n    types.SlotRange = {\n      _enum: _enum\n    };\n    types.WinningData = \"[WinningDataEntry; \".concat(slotRangeCount.toNumber(), \"]\");\n  }\n\n  return types;\n}\n\nfunction filterEntries(original) {\n  var included = original.map(function (c) {\n    return !!c;\n  });\n  var filtered = original.filter(function (_, index) {\n    return included[index];\n  });\n  return {\n    filtered: filtered,\n    included: included,\n    original: original\n  };\n}\n\nfunction extractResults(results, map) {\n  var offset = -1;\n  return map.included.map(function (isIncluded) {\n    return isIncluded ? results[++offset] : null;\n  });\n}\n/**\n * @description Query the chain for the specific capabilities\n */\n\n\nexport function detectedCapabilities(api, blockHash) {\n  var _api$consts$auctions, _api$consts$auctions2, _api$query$system, _api$query$system2, _api$query$system3, _api$query$staking, _api$query$session;\n\n  var consts = filterEntries([(_api$consts$auctions = api.consts.auctions) === null || _api$consts$auctions === void 0 ? void 0 : _api$consts$auctions.leasePeriodsPerSlot, (_api$consts$auctions2 = api.consts.auctions) === null || _api$consts$auctions2 === void 0 ? void 0 : _api$consts$auctions2.slotRangeCount]);\n  var queries = filterEntries([(_api$query$system = api.query.system) === null || _api$query$system === void 0 ? void 0 : _api$query$system.upgradedToU32RefCount, (_api$query$system2 = api.query.system) === null || _api$query$system2 === void 0 ? void 0 : _api$query$system2.upgradedToDualRefCount, (_api$query$system3 = api.query.system) === null || _api$query$system3 === void 0 ? void 0 : _api$query$system3.upgradedToTripleRefCount, (_api$query$staking = api.query.staking) === null || _api$query$staking === void 0 ? void 0 : _api$query$staking.storageVersion]);\n  var raws = filterEntries([(_api$query$session = api.query.session) === null || _api$query$session === void 0 ? void 0 : _api$query$session.queuedKeys]);\n  return combineLatest([consts.filtered.length ? blockHash // FIXME consts don't have .at as of yet...\n  ? of([]) : of(consts.filtered) : of([]), queries.filtered.length ? blockHash ? combineLatest(queries.filtered.map(function (c) {\n    return c.at(blockHash);\n  })) : api.queryMulti(queries.filtered) : of([]), raws.filtered.length ? blockHash ? combineLatest(raws.filtered.map(function (k) {\n    return api.rpc.state.getStorage.raw(k.key(), blockHash);\n  })) : combineLatest(raws.filtered.map(function (k) {\n    return api.rpc.state.getStorage.raw(k.key());\n  })) : of([])]).pipe(map(function (_ref8) {\n    var _ref9 = _slicedToArray(_ref8, 3),\n        cResults = _ref9[0],\n        qResults = _ref9[1],\n        rResults = _ref9[2];\n\n    return mapCapabilities({\n      accountIdLength: api.registry.createType('AccountId').encodedLength\n    }, extractResults(cResults, consts), extractResults(qResults, queries), extractResults(rResults, raws));\n  }), take(1));\n}","map":null,"metadata":{},"sourceType":"module"}