{"ast":null,"code":"import _slicedToArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { of } from '@polkadot/x-rxjs';\nimport { map } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.js\"; // parse into Indexes\n\nfunction parse(_ref) {\n  var _ref2 = _slicedToArray(_ref, 5),\n      currentIndex = _ref2[0],\n      activeEra = _ref2[1],\n      activeEraStart = _ref2[2],\n      currentEra = _ref2[3],\n      validatorCount = _ref2[4];\n\n  return {\n    activeEra: activeEra,\n    activeEraStart: activeEraStart,\n    currentEra: currentEra,\n    currentIndex: currentIndex,\n    validatorCount: validatorCount\n  };\n} // query based on latest\n\n\nfunction queryStaking(api) {\n  return api.queryMulti([api.query.session.currentIndex, api.query.staking.activeEra, api.query.staking.currentEra, api.query.staking.validatorCount]).pipe(map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 4),\n        currentIndex = _ref4[0],\n        activeOpt = _ref4[1],\n        currentEra = _ref4[2],\n        validatorCount = _ref4[3];\n\n    var _activeOpt$unwrapOrDe = activeOpt.unwrapOrDefault(),\n        index = _activeOpt$unwrapOrDe.index,\n        start = _activeOpt$unwrapOrDe.start;\n\n    return parse([currentIndex, index, start, currentEra.unwrapOrDefault(), validatorCount]);\n  }));\n} // query based on latest\n\n\nfunction querySession(api) {\n  return api.query.session.currentIndex().pipe(map(function (currentIndex) {\n    return parse([currentIndex, api.registry.createType('EraIndex'), api.registry.createType('Option<Moment>'), api.registry.createType('EraIndex'), api.registry.createType('u32')]);\n  }));\n} // empty set when none is available\n\n\nfunction empty(api) {\n  return of(parse([api.registry.createType('SessionIndex', 1), api.registry.createType('EraIndex'), api.registry.createType('Option<Moment>'), api.registry.createType('EraIndex'), api.registry.createType('u32')]));\n}\n\nexport function indexes(instanceId, api) {\n  return memo(instanceId, function () {\n    return api.query.session ? api.query.staking ? queryStaking(api) : querySession(api) : empty(api);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}