{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, u8aEq, u8aToU8a } from '@polkadot/util';\nimport { secp256k1Expand } from \"./expand.js\";\nimport { secp256k1Hasher } from \"./hasher.js\";\nimport { secp256k1 } from \"./secp256k1.js\";\n/**\n * @name secp256k1Verify\n * @description Verifies the signature of `message`, using the supplied pair\n */\n\nexport function secp256k1Verify(message, signature, address) {\n  var hashType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'blake2';\n  var isEthereum = hashType === 'keccak';\n  var u8a = u8aToU8a(signature);\n  assert(u8a.length === 65, \"Expected signature with 65 bytes, \".concat(u8a.length, \" found instead\"));\n  var publicKey = new Uint8Array( // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n  secp256k1.recoverPubKey(secp256k1Hasher(hashType, message), {\n    r: u8a.slice(0, 32),\n    s: u8a.slice(32, 64)\n  }, u8a[64]).encodeCompressed());\n  var signingAddress = secp256k1Hasher(hashType, isEthereum ? secp256k1Expand(publicKey) : publicKey);\n  var inputAddress = u8aToU8a(address); // for Ethereum (keccak) the last 20 bytes is the address\n\n  return isEthereum ? u8aEq(signingAddress.slice(-20), inputAddress.slice(-20)) : u8aEq(signingAddress, inputAddress);\n}","map":null,"metadata":{},"sourceType":"module"}