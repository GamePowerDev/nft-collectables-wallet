{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { drr } from '@polkadot/rpc-core/util';\nimport { memoize } from '@polkadot/util';\nimport { Observable } from '@polkadot/x-rxjs'; // Wraps a derive, doing 2 things to optimize calls -\n//   1. creates a memo of the inner fn -> Observable, removing when unsubscribed\n//   2. wraps the observable in a drr() (which includes an unsub delay)\n\n/** @internal */\n\nexport function memo(instanceId, inner) {\n  var cached = memoize(function () {\n    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n      params[_key] = arguments[_key];\n    }\n\n    return new Observable(function (observer) {\n      var subscription = inner.apply(void 0, params).subscribe(observer);\n      return function () {\n        cached.unmemoize.apply(cached, params);\n        subscription.unsubscribe();\n      };\n    }).pipe(drr());\n  }, {\n    getInstanceId: function getInstanceId() {\n      return instanceId;\n    }\n  });\n  return cached;\n}","map":null,"metadata":{},"sourceType":"module"}