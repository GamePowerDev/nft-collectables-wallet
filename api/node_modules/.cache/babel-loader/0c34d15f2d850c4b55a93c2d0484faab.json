{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '@polkadot/util';\n\nfunction isNotNested() {\n  for (var _len = arguments.length, counters = new Array(_len), _key = 0; _key < _len; _key++) {\n    counters[_key] = arguments[_key];\n  }\n\n  return !counters.some(function (counter) {\n    return counter !== 0;\n  });\n} // safely split a string on ', ' while taking care of any nested occurences\n\n\nexport function typeSplit(type) {\n  var cDepth = 0,\n      fDepth = 0,\n      sDepth = 0,\n      tDepth = 0,\n      start = 0;\n  var result = [];\n\n  var extract = function extract(index) {\n    if (isNotNested(cDepth, fDepth, sDepth, tDepth)) {\n      result.push(type.substr(start, index - start).trim());\n      start = index + 1;\n    }\n  };\n\n  for (var index = 0; index < type.length; index++) {\n    switch (type[index]) {\n      // if we are not nested, add the type\n      case ',':\n        extract(index);\n        break;\n      // adjust compact/vec (and friends) depth\n\n      case '<':\n        cDepth++;\n        break;\n\n      case '>':\n        cDepth--;\n        break;\n      // adjust fixed vec depths\n\n      case '[':\n        fDepth++;\n        break;\n\n      case ']':\n        fDepth--;\n        break;\n      // adjust struct depth\n\n      case '{':\n        sDepth++;\n        break;\n\n      case '}':\n        sDepth--;\n        break;\n      // adjust tuple depth\n\n      case '(':\n        tDepth++;\n        break;\n\n      case ')':\n        tDepth--;\n        break;\n    }\n  }\n\n  assert(isNotNested(cDepth, fDepth, sDepth, tDepth), \"Invalid definition (missing terminators) found in \".concat(type)); // the final leg of the journey\n\n  result.push(type.substr(start, type.length - start).trim());\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}