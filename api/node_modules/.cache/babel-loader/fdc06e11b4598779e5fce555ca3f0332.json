{"ast":null,"code":"import _toConsumableArray from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, compactToU8a, isU8a, u8aConcat } from '@polkadot/util';\nimport { AbstractArray } from \"./AbstractArray.js\";\nimport { typeToConstructor } from \"./utils/index.js\";\nimport { Vec } from \"./Vec.js\";\n/**\n * @name VecFixed\n * @description\n * This manages codec arrays of a fixed length\n */\n\nexport var VecFixed = /*#__PURE__*/function (_AbstractArray) {\n  _inherits(VecFixed, _AbstractArray);\n\n  var _super = _createSuper(VecFixed);\n\n  function VecFixed(registry, Type, length) {\n    var _this;\n\n    var value = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n    _classCallCheck(this, VecFixed);\n\n    var Clazz = typeToConstructor(registry, Type);\n    _this = _super.call.apply(_super, [this, registry].concat(_toConsumableArray(VecFixed.decodeVecFixed(registry, Clazz, length, value))));\n    _this._Type = void 0;\n    _this._Type = Clazz;\n    return _this;\n  }\n  /** @internal */\n\n\n  _createClass(VecFixed, [{\n    key: \"Type\",\n    get:\n    /**\n     * @description The type for the items\n     */\n    function get() {\n      return new this._Type(this.registry).toRawType();\n    }\n    /**\n     * @description The length of the value when encoded as a Uint8Array\n     */\n\n  }, {\n    key: \"encodedLength\",\n    get: function get() {\n      return this.toU8a().length;\n    }\n  }, {\n    key: \"toU8a\",\n    value: function toU8a() {\n      // we override, we don't add the length prefix for ourselves, and at the same time we\n      // ignore isBare on entries, since they should be properly encoded at all times\n      var encoded = this.map(function (entry) {\n        return entry.toU8a();\n      });\n      return encoded.length ? u8aConcat.apply(void 0, _toConsumableArray(encoded)) : new Uint8Array([]);\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return \"[\".concat(this.Type, \";\").concat(this.length, \"]\");\n    }\n  }], [{\n    key: \"decodeVecFixed\",\n    value: function decodeVecFixed(registry, Type, allocLength, value) {\n      var values = Vec.decodeVec(registry, Type, isU8a(value) ? u8aConcat(compactToU8a(allocLength), value) : value);\n\n      while (values.length < allocLength) {\n        values.push(new Type(registry));\n      }\n\n      assert(values.length === allocLength, \"Expected a length of exactly \".concat(allocLength, \" entries\"));\n      return values;\n    }\n  }, {\n    key: \"with\",\n    value: function _with(Type, length) {\n      return /*#__PURE__*/function (_VecFixed) {\n        _inherits(_class, _VecFixed);\n\n        var _super2 = _createSuper(_class);\n\n        function _class(registry, value) {\n          _classCallCheck(this, _class);\n\n          return _super2.call(this, registry, Type, length, value);\n        }\n\n        return _class;\n      }(VecFixed);\n    }\n  }]);\n\n  return VecFixed;\n}(AbstractArray);","map":null,"metadata":{},"sourceType":"module"}