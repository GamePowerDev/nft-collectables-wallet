{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assertReturn, isU8a } from '@polkadot/util';\nimport { decodeAddress } from '@polkadot/util-crypto';\nimport { of } from '@polkadot/x-rxjs';\nimport { map } from '@polkadot/x-rxjs/operators';\nimport { memo } from \"../util/index.js\";\n\nfunction retrieve(api, address) {\n  var decoded = isU8a(address) ? address : decodeAddress((address || '').toString());\n\n  if (decoded.length > 8) {\n    return of(api.registry.createType('AccountId', decoded));\n  }\n\n  var accountIndex = api.registry.createType('AccountIndex', decoded);\n  return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map(function (accountId) {\n    return assertReturn(accountId, 'Unable to retrieve accountId');\n  }));\n}\n/**\n * @name accountId\n * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.\n * @description  An [[AccountId]]\n */\n\n\nexport function accountId(instanceId, api) {\n  return memo(instanceId, function (address) {\n    return retrieve(api, address);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}