{"ast":null,"code":"import _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport BN from 'bn.js';\nimport { bnToBn, isBigInt, isBn, isHex, isNumber, isU8a } from '@polkadot/util';\nimport { decodeAddress, encodeAddress } from '@polkadot/util-crypto';\nimport { u32 } from \"../primitive/U32.js\";\nvar PREFIX_1BYTE = 0xef;\nvar PREFIX_2BYTE = 0xfc;\nvar PREFIX_4BYTE = 0xfd;\nvar PREFIX_8BYTE = 0xfe;\nvar MAX_1BYTE = new BN(PREFIX_1BYTE);\nvar MAX_2BYTE = new BN(1).shln(16);\nvar MAX_4BYTE = new BN(1).shln(32);\n/** @internal */\n\nfunction decodeAccountIndex(value) {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  if (value instanceof GenericAccountIndex) {\n    // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an\n    // AccountIndex), which has the initial `toString()` implementation.\n    return value.toBn();\n  } else if (isBn(value) || isNumber(value) || isHex(value) || isU8a(value) || isBigInt(value)) {\n    return value;\n  }\n\n  return decodeAccountIndex(decodeAddress(value));\n}\n/**\n * @name GenericAccountIndex\n * @description\n * A wrapper around an AccountIndex, which is a shortened, variable-length encoding\n * for an Account. We extends from [[U32]] to provide the number-like properties.\n */\n\n\nexport var GenericAccountIndex = /*#__PURE__*/function (_u) {\n  _inherits(GenericAccountIndex, _u);\n\n  var _super = _createSuper(GenericAccountIndex);\n\n  function GenericAccountIndex(registry) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new BN(0);\n\n    _classCallCheck(this, GenericAccountIndex);\n\n    return _super.call(this, registry, decodeAccountIndex(value));\n  }\n\n  _createClass(GenericAccountIndex, [{\n    key: \"eq\",\n    value:\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n    function eq(other) {\n      // shortcut for BN or Number, don't create an object\n      if (isBn(other) || isNumber(other)) {\n        return _get(_getPrototypeOf(GenericAccountIndex.prototype), \"eq\", this).call(this, other);\n      } // convert and compare\n\n\n      return _get(_getPrototypeOf(GenericAccountIndex.prototype), \"eq\", this).call(this, this.registry.createType('AccountIndex', other));\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman() {\n      return this.toJSON();\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var length = GenericAccountIndex.calcLength(this);\n      return encodeAddress(this.toU8a().subarray(0, length), this.registry.chainSS58);\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return 'AccountIndex';\n    }\n  }], [{\n    key: \"calcLength\",\n    value: function calcLength(_value) {\n      var value = bnToBn(_value);\n\n      if (value.lte(MAX_1BYTE)) {\n        return 1;\n      } else if (value.lt(MAX_2BYTE)) {\n        return 2;\n      } else if (value.lt(MAX_4BYTE)) {\n        return 4;\n      }\n\n      return 8;\n    }\n  }, {\n    key: \"readLength\",\n    value: function readLength(input) {\n      var first = input[0];\n\n      if (first === PREFIX_2BYTE) {\n        return [1, 2];\n      } else if (first === PREFIX_4BYTE) {\n        return [1, 4];\n      } else if (first === PREFIX_8BYTE) {\n        return [1, 8];\n      }\n\n      return [0, 1];\n    }\n  }, {\n    key: \"writeLength\",\n    value: function writeLength(input) {\n      switch (input.length) {\n        case 2:\n          return new Uint8Array([PREFIX_2BYTE]);\n\n        case 4:\n          return new Uint8Array([PREFIX_4BYTE]);\n\n        case 8:\n          return new Uint8Array([PREFIX_8BYTE]);\n\n        default:\n          return new Uint8Array([]);\n      }\n    }\n  }]);\n\n  return GenericAccountIndex;\n}(u32);","map":null,"metadata":{},"sourceType":"module"}