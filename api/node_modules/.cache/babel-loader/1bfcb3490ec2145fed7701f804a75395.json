{"ast":null,"code":"import _classCallCheck from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michaelhuntington/Documents/GitHub/nft-collectibles-wallet/api/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, hexToU8a, isHex, isString, isU8a, u8aToU8a } from '@polkadot/util';\nimport { decodeAddress, encodeAddress } from '@polkadot/util-crypto';\nimport { U8aFixed } from \"../codec/U8aFixed.js\";\n/** @internal */\n\nfunction decodeAccountId(value) {\n  if (!value) {\n    return new Uint8Array();\n  } else if (isU8a(value) || Array.isArray(value)) {\n    return u8aToU8a(value);\n  } else if (isHex(value)) {\n    return hexToU8a(value.toString());\n  } else if (isString(value)) {\n    return decodeAddress(value.toString());\n  }\n\n  throw new Error('Unknown type passed to AccountId constructor');\n}\n/**\n * @name GenericAccountId\n * @description\n * A wrapper around an AccountId/PublicKey representation. Since we are dealing with\n * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is\n * just a Uint8Array wrapper with a fixed length.\n */\n\n\nexport var GenericAccountId = /*#__PURE__*/function (_U8aFixed) {\n  _inherits(GenericAccountId, _U8aFixed);\n\n  var _super = _createSuper(GenericAccountId);\n\n  function GenericAccountId(registry, value) {\n    _classCallCheck(this, GenericAccountId);\n\n    var decoded = decodeAccountId(value); // Part of stream containing >= 32 bytes or a all empty (defaults)\n\n    assert(decoded.length >= 32 || !decoded.some(function (b) {\n      return b;\n    }), \"Invalid AccountId provided, expected 32 bytes, found \".concat(decoded.length));\n    return _super.call(this, registry, decoded, 256);\n  }\n\n  _createClass(GenericAccountId, [{\n    key: \"eq\",\n    value:\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n    function eq(other) {\n      return _get(_getPrototypeOf(GenericAccountId.prototype), \"eq\", this).call(this, decodeAccountId(other));\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman() {\n      return this.toJSON();\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return GenericAccountId.encode(this, this.registry.chainSS58);\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return 'AccountId';\n    }\n  }], [{\n    key: \"encode\",\n    value: function encode(value, ss58Format) {\n      return encodeAddress(value, ss58Format);\n    }\n  }]);\n\n  return GenericAccountId;\n}(U8aFixed);","map":null,"metadata":{},"sourceType":"module"}